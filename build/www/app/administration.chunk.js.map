{"version":3,"file":"app/administration.chunk.js","sources":["webpack:///./src/main/webapp/app/modules/administration/audits/audits.tsx","webpack:///./src/main/webapp/app/modules/administration/configuration/configuration.tsx","webpack:///./src/main/webapp/app/modules/administration/docs/docs.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health-modal.tsx","webpack:///./src/main/webapp/app/modules/administration/health/health.tsx","webpack:///./src/main/webapp/app/modules/administration/index.tsx","webpack:///./src/main/webapp/app/modules/administration/logs/logs.tsx","webpack:///./src/main/webapp/app/modules/administration/metrics/metrics.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/index.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-detail.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","webpack:///./src/main/webapp/app/modules/administration/user-management/user-management.tsx"],"sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Input, Row, Table } from 'reactstrap';\r\nimport { TextFormat, JhiPagination, getPaginationItemsNumber, getSortState, IPaginationBaseState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_TIMESTAMP_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getAudits } from '../administration.reducer';\r\n\r\nexport interface IAuditsPageProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\r\n\r\nexport interface IAuditsPageState extends IPaginationBaseState {\r\n  fromDate: string;\r\n  toDate: string;\r\n}\r\n\r\nconst previousMonth = (): string => {\r\n  const now: Date = new Date();\r\n  const fromDate =\r\n    now.getMonth() === 0\r\n      ? new Date(now.getFullYear() - 1, 11, now.getDate())\r\n      : new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());\r\n  return fromDate.toISOString().slice(0, 10);\r\n};\r\n\r\nconst today = (): string => {\r\n  // Today + 1 day - needed if the current day must be included\r\n  const day: Date = new Date();\r\n  day.setDate(day.getDate() + 1);\r\n  const toDate = new Date(day.getFullYear(), day.getMonth(), day.getDate());\r\n  return toDate.toISOString().slice(0, 10);\r\n};\r\n\r\nexport class AuditsPage extends React.Component<IAuditsPageProps, IAuditsPageState> {\r\n  state: IAuditsPageState = {\r\n    ...getSortState(this.props.location, ITEMS_PER_PAGE),\r\n    fromDate: previousMonth(),\r\n    toDate: today()\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getAudits();\r\n  }\r\n\r\n  onChangeFromDate = evt => {\r\n    this.setState(\r\n      {\r\n        fromDate: evt.target.value\r\n      },\r\n      () => this.getAudits()\r\n    );\r\n  };\r\n  onChangeToDate = evt => {\r\n    this.setState(\r\n      {\r\n        toDate: evt.target.value\r\n      },\r\n      () => this.getAudits()\r\n    );\r\n  };\r\n\r\n  sort = prop => () => {\r\n    this.setState(\r\n      {\r\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\r\n        sort: prop\r\n      },\r\n      () => this.transition()\r\n    );\r\n  };\r\n\r\n  transition = () => {\r\n    this.getAudits();\r\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\r\n  };\r\n\r\n  handlePagination = activePage => this.setState({ activePage }, () => this.transition());\r\n\r\n  getAudits = () => {\r\n    const { activePage, itemsPerPage, sort, order, fromDate, toDate } = this.state;\r\n    this.props.getAudits(activePage - 1, itemsPerPage, `${sort},${order}`, fromDate, toDate);\r\n  };\r\n\r\n  render() {\r\n    const { audits, totalItems } = this.props;\r\n    const { fromDate, toDate } = this.state;\r\n    return (\r\n      <div>\r\n        <h2 id=\"audits-page-heading\">Audits</h2>\r\n        <span>from</span>\r\n        <Input type=\"date\" value={fromDate} onChange={this.onChangeFromDate} name=\"fromDate\" id=\"fromDate\" />\r\n        <span>to</span>\r\n        <Input type=\"date\" value={toDate} onChange={this.onChangeToDate} name=\"toDate\" id=\"toDate\" />\r\n        <Table striped responsive>\r\n          <thead>\r\n            <tr>\r\n              <th onClick={this.sort('auditEventDate')}>\r\n                Date\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th onClick={this.sort('principal')}>\r\n                User\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th onClick={this.sort('auditEventType')}>\r\n                State\r\n                <FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th>Extra data</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {audits.map((audit, i) => (\r\n              <tr key={`audit-${i}`}>\r\n                <td>{<TextFormat value={audit.timestamp} type=\"date\" format={APP_TIMESTAMP_FORMAT} />}</td>\r\n                <td>{audit.principal}</td>\r\n                <td>{audit.type}</td>\r\n                <td>\r\n                  {audit.data ? audit.data.message : null}\r\n                  {audit.data ? audit.data.remoteAddress : null}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <Row className=\"justify-content-center\">\r\n          <JhiPagination\r\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\r\n            activePage={this.state.activePage}\r\n            onSelect={this.handlePagination}\r\n            maxButtons={5}\r\n          />\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  audits: storeState.administration.audits,\r\n  totalItems: storeState.administration.totalItems\r\n});\r\n\r\nconst mapDispatchToProps = { getAudits };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(AuditsPage);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Table, Input, Row, Col, Badge } from 'reactstrap';\r\n\r\nimport { getConfigurations, getEnv } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IConfigurationPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IConfigurationPageState {\r\n  filter: string;\r\n  reversePrefix: boolean;\r\n  reverseProperties: boolean;\r\n}\r\n\r\nexport class ConfigurationPage extends React.Component<IConfigurationPageProps, IConfigurationPageState> {\r\n  state: IConfigurationPageState = {\r\n    filter: '',\r\n    reversePrefix: false,\r\n    reverseProperties: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getConfigurations();\r\n    this.props.getEnv();\r\n  }\r\n\r\n  setFilter = evt => {\r\n    this.setState({\r\n      filter: evt.target.value\r\n    });\r\n  };\r\n\r\n  envFilterFn = configProp => configProp.toUpperCase().includes(this.state.filter.toUpperCase());\r\n  propsFilterFn = configProp => configProp.prefix.toUpperCase().includes(this.state.filter.toUpperCase());\r\n\r\n  reversePrefix = () => {\r\n    this.setState({\r\n      reversePrefix: !this.state.reversePrefix\r\n    });\r\n  };\r\n\r\n  reverseProperties = () => {\r\n    this.setState({\r\n      reverseProperties: !this.state.reverseProperties\r\n    });\r\n  };\r\n\r\n  getContextList = contexts =>\r\n    Object.values(contexts)\r\n      .map((v: any) => v.beans)\r\n      .reduce((acc, e) => ({ ...acc, ...e }));\r\n\r\n  render() {\r\n    const { configuration } = this.props;\r\n    const { filter } = this.state;\r\n    const configProps = configuration && configuration.configProps ? configuration.configProps : {};\r\n    const env = configuration && configuration.env ? configuration.env : {};\r\n    return (\r\n      <div>\r\n        <h2 id=\"configuration-page-heading\">Configuration</h2>\r\n        <span>Filter</span> <Input type=\"search\" value={filter} onChange={this.setFilter} name=\"search\" id=\"search\" />\r\n        <label>Spring configuration</label>\r\n        <Table className=\"table table-striped table-bordered table-responsive d-table\">\r\n          <thead>\r\n            <tr>\r\n              <th onClick={this.reversePrefix}>Prefix</th>\r\n              <th onClick={this.reverseProperties}>Properties</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {configProps.contexts\r\n              ? Object.values(this.getContextList(configProps.contexts))\r\n                  .filter(this.propsFilterFn)\r\n                  .map((property, propIndex) => (\r\n                    <tr key={propIndex}>\r\n                      <td>{property['prefix']}</td>\r\n                      <td>\r\n                        {Object.keys(property['properties']).map((propKey, index) => (\r\n                          <Row key={index}>\r\n                            <Col md=\"4\">{propKey}</Col>\r\n                            <Col md=\"8\">\r\n                              <Badge className=\"float-right badge-secondary break\">{JSON.stringify(property['properties'][propKey])}</Badge>\r\n                            </Col>\r\n                          </Row>\r\n                        ))}\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n              : null}\r\n          </tbody>\r\n        </Table>\r\n        {env.propertySources\r\n          ? env.propertySources.map((envKey, envIndex) => (\r\n              <div key={envIndex}>\r\n                <h4>\r\n                  <span>{envKey.name}</span>\r\n                </h4>\r\n                <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\r\n                  <thead>\r\n                    <tr key={envIndex}>\r\n                      <th className=\"w-40\">Property</th>\r\n                      <th className=\"w-60\">Value</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {Object.keys(envKey.properties)\r\n                      .filter(this.envFilterFn)\r\n                      .map((propKey, propIndex) => (\r\n                        <tr key={propIndex}>\r\n                          <td className=\"break\">{propKey}</td>\r\n                          <td className=\"break\">\r\n                            <span className=\"float-right badge badge-secondary break\">{envKey.properties[propKey].value}</span>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n            ))\r\n          : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ administration }: IRootState) => ({\r\n  configuration: administration.configuration,\r\n  isFetching: administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { getConfigurations, getEnv };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConfigurationPage);\r\n","import React from 'react';\r\n\r\nconst DocsPage = () => (\r\n  <div>\r\n    <iframe src=\"../swagger-ui/index.html\" width=\"100%\" height=\"800\" title=\"Swagger UI\" seamless style={{ border: 'none' }} />\r\n  </div>\r\n);\r\n\r\nexport default DocsPage;\r\n","import React from 'react';\r\nimport { Table, Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\nconst formatDiskSpaceOutput = rawValue => {\r\n  // Should display storage space in an human readable unit\r\n  const val = rawValue / 1073741824;\r\n  if (val > 1) {\r\n    // Value\r\n    return val.toFixed(2) + ' GB';\r\n  } else {\r\n    return (rawValue / 1048576).toFixed(2) + ' MB';\r\n  }\r\n};\r\n\r\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\r\n  const data = healthObject.details || {};\r\n  return (\r\n    <Modal isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }} toggle={handleClose}>\r\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\r\n      <ModalBody>\r\n        <Table bordered>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Value</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(data).map((key, index) => (\r\n              <tr key={index}>\r\n                <td>{key}</td>\r\n                <td>{healthObject.name === 'diskSpace' ? formatDiskSpaceOutput(data[key]) : JSON.stringify(data[key])}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"primary\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default HealthModal;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { systemHealth } from '../administration.reducer';\r\nimport HealthModal from './health-modal';\r\n\r\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IHealthPageState {\r\n  healthObject: any;\r\n  showModal: boolean;\r\n}\r\n\r\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\r\n  state: IHealthPageState = {\r\n    healthObject: {},\r\n    showModal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.systemHealth();\r\n  }\r\n\r\n  getSystemHealth = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.systemHealth();\r\n    }\r\n  };\r\n\r\n  getSystemHealthInfo = (name, healthObject) => () => {\r\n    this.setState({\r\n      showModal: true,\r\n      healthObject: {\r\n        ...healthObject,\r\n        name\r\n      }\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showModal: false\r\n    });\r\n  };\r\n\r\n  renderModal = () => {\r\n    const { healthObject } = this.state;\r\n    return <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />;\r\n  };\r\n\r\n  render() {\r\n    const { health, isFetching } = this.props;\r\n    const data = (health || {}).details || {};\r\n    return (\r\n      <div>\r\n        <h2 id=\"health-page-heading\">Health Checks</h2>\r\n        <p>\r\n          <Button onClick={this.getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n            <FontAwesomeIcon icon=\"sync\" />&nbsp; Refresh\r\n          </Button>\r\n        </p>\r\n        <Row>\r\n          <Col md=\"12\">\r\n            <Table bordered>\r\n              <thead>\r\n                <tr>\r\n                  <th>Service Name</th>\r\n                  <th>Status</th>\r\n                  <th>Details</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(data).map(\r\n                  (configPropKey, configPropIndex) =>\r\n                    configPropKey !== 'status' ? (\r\n                      <tr key={configPropIndex}>\r\n                        <td>{configPropKey}</td>\r\n                        <td>\r\n                          <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\r\n                        </td>\r\n                        <td>\r\n                          {data[configPropKey].details ? (\r\n                            <a onClick={this.getSystemHealthInfo(configPropKey, data[configPropKey])}>\r\n                              <FontAwesomeIcon icon=\"eye\" />\r\n                            </a>\r\n                          ) : null}\r\n                        </td>\r\n                      </tr>\r\n                    ) : null\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n        {this.renderModal()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  health: storeState.administration.health,\r\n  isFetching: storeState.administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { systemHealth };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(HealthPage);\r\n","import React from 'react';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport Logs from './logs/logs';\r\nimport Health from './health/health';\r\nimport Metrics from './metrics/metrics';\r\nimport Configuration from './configuration/configuration';\r\nimport Audits from './audits/audits';\r\nimport Docs from './docs/docs';\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <ErrorBoundaryRoute path={`${match.url}/user-management`} component={UserManagement} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/metrics`} component={Metrics} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/configuration`} component={Configuration} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/audits`} component={Audits} />\r\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface ILogsPageState {\r\n  filter: string;\r\n}\r\n\r\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\r\n  state: ILogsPageState = {\r\n    filter: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getLoggers();\r\n  }\r\n\r\n  getLogs = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.getLoggers();\r\n    }\r\n  };\r\n\r\n  changeLevel = (loggerName, level) => () => {\r\n    this.props.changeLogLevel(loggerName, level);\r\n  };\r\n\r\n  setFilter = evt => {\r\n    this.setState({\r\n      filter: evt.target.value\r\n    });\r\n  };\r\n\r\n  getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\r\n\r\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\r\n\r\n  render() {\r\n    const { logs, isFetching } = this.props;\r\n    const { filter } = this.state;\r\n    const loggers = logs ? logs.loggers : [];\r\n    return (\r\n      <div>\r\n        <h2 id=\"logs-page-heading\">Logs</h2>\r\n        <p>There are {loggers.length.toString()} loggers.</p>\r\n\r\n        <span>Filter</span>\r\n        <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\r\n\r\n        <table className=\"table table-sm table-striped table-bordered\">\r\n          <thead>\r\n            <tr title=\"click to order\">\r\n              <th>\r\n                <span>Name</span>\r\n              </th>\r\n              <th>\r\n                <span>Level</span>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loggers.filter(this.filterFn).map((logger, i) => (\r\n              <tr key={`log-row-${i}`}>\r\n                <td>\r\n                  <small>{logger.name}</small>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'TRACE')}\r\n                    className={this.getClassName(logger.level, 'TRACE', 'primary')}\r\n                  >\r\n                    TRACE\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'DEBUG')}\r\n                    className={this.getClassName(logger.level, 'DEBUG', 'success')}\r\n                  >\r\n                    DEBUG\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'INFO')}\r\n                    className={this.getClassName(logger.level, 'INFO', 'info')}\r\n                  >\r\n                    INFO\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'WARN')}\r\n                    className={this.getClassName(logger.level, 'WARN', 'warning')}\r\n                  >\r\n                    WARN\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'ERROR')}\r\n                    className={this.getClassName(logger.level, 'ERROR', 'danger')}\r\n                  >\r\n                    ERROR\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'OFF')}\r\n                    className={this.getClassName(logger.level, 'OFF', 'secondary')}\r\n                  >\r\n                    OFF\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ administration }: IRootState) => ({\r\n  logs: administration.logs,\r\n  isFetching: administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LogsPage);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Col, Progress, Row, Table } from 'reactstrap';\r\nimport {\r\n  CacheMetrics,\r\n  DatasourceMetrics,\r\n  GarbageCollectorMetrics,\r\n  HttpRequestMetrics,\r\n  JvmMemory,\r\n  JvmThreads,\r\n  EndpointsRequestsMetrics,\r\n  SystemMetrics,\r\n  Translate\r\n} from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_TIMESTAMP_FORMAT, APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT, APP_WHOLE_NUMBER_FORMAT } from 'app/config/constants';\r\nimport { systemMetrics, systemThreadDump } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IMetricsPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IMetricsPageState {\r\n  showModal: boolean;\r\n}\r\n\r\nexport class MetricsPage extends React.Component<IMetricsPageProps, IMetricsPageState> {\r\n  state: IMetricsPageState = {\r\n    showModal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.systemMetrics();\r\n    this.props.systemThreadDump();\r\n  }\r\n\r\n  getMetrics = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.systemMetrics();\r\n      this.props.systemThreadDump();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { metrics, threadDump, isFetching } = this.props;\r\n    return (\r\n      <div>\r\n        <h2 id=\"metrics-page-heading\">Application Metrics</h2>\r\n        <p>\r\n          <Button onClick={this.getMetrics} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n            <FontAwesomeIcon icon=\"sync\" />\r\n            &nbsp; Refresh\r\n          </Button>\r\n        </p>\r\n        <hr />\r\n\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <h3>JVM Metrics</h3>\r\n            <Row>\r\n              <Col md=\"4\">\r\n                {metrics && metrics.jvm ? <JvmMemory jvmMetrics={metrics.jvm} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}\r\n              </Col>\r\n              <Col md=\"4\">{threadDump ? <JvmThreads jvmThreads={threadDump} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} /> : ''}</Col>\r\n              <Col md=\"4\">\r\n                {metrics && metrics.processMetrics ? (\r\n                  <SystemMetrics\r\n                    systemMetrics={metrics.processMetrics}\r\n                    wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\r\n                    timestampFormat={APP_TIMESTAMP_FORMAT}\r\n                  />\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n\r\n        {metrics && metrics.garbageCollector ? (\r\n          <GarbageCollectorMetrics garbageCollectorMetrics={metrics.garbageCollector} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\r\n        ) : (\r\n          ''\r\n        )}\r\n        {metrics && metrics['http.server.requests'] ? (\r\n          <HttpRequestMetrics\r\n            requestMetrics={metrics['http.server.requests']}\r\n            twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n            wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\r\n          />\r\n        ) : (\r\n          ''\r\n        )}\r\n        {metrics && metrics.endpointsRequests ? (\r\n          <EndpointsRequestsMetrics endpointsRequestsMetrics={metrics.endpointsRequests} wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT} />\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {metrics.cache ? (\r\n          <Row>\r\n            <Col sm=\"12\">\r\n              <CacheMetrics cacheMetrics={metrics.cache} twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT} />\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {metrics.databases && JSON.stringify(metrics.databases) !== '{}' ? (\r\n          <Row>\r\n            <Col sm=\"12\">\r\n              <DatasourceMetrics\r\n                datasourceMetrics={metrics.databases}\r\n                twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  metrics: storeState.administration.metrics,\r\n  isFetching: storeState.administration.loading,\r\n  threadDump: storeState.administration.threadDump\r\n});\r\n\r\nconst mapDispatchToProps = { systemMetrics, systemThreadDump };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MetricsPage);\r\n","import React from 'react';\r\nimport { Switch } from 'react-router-dom';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\nimport UserManagement from './user-management';\r\nimport UserManagementDetail from './user-management-detail';\r\nimport UserManagementUpdate from './user-management-update';\r\nimport UserManagementDeleteDialog from './user-management-delete-dialog';\r\n\r\nconst Routes = ({ match }) => (\r\n  <>\r\n    <Switch>\r\n      <ErrorBoundaryRoute exact path={`${match.url}/new`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login/edit`} component={UserManagementUpdate} />\r\n      <ErrorBoundaryRoute exact path={`${match.url}/:login`} component={UserManagementDetail} />\r\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\r\n    </Switch>\r\n    <ErrorBoundaryRoute path={`${match.url}/:login/delete`} component={UserManagementDeleteDialog} />\r\n  </>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\nimport { ICrudGetAction, ICrudDeleteAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IUser } from 'app/shared/model/user.model';\r\nimport { getUser, deleteUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementDeleteDialogProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport class UserManagementDeleteDialog extends React.Component<IUserManagementDeleteDialogProps> {\r\n  componentDidMount() {\r\n    this.props.getUser(this.props.match.params.login);\r\n  }\r\n\r\n  confirmDelete = event => {\r\n    this.props.deleteUser(this.props.user.login);\r\n    this.handleClose(event);\r\n  };\r\n\r\n  handleClose = event => {\r\n    event.stopPropagation();\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    return (\r\n      <Modal isOpen toggle={this.handleClose}>\r\n        <ModalHeader toggle={this.handleClose}>Confirm delete operation</ModalHeader>\r\n        <ModalBody>Are you sure you want to delete this User?</ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={this.handleClose}>\r\n            <FontAwesomeIcon icon=\"ban\" />&nbsp; Cancel\r\n          </Button>\r\n          <Button color=\"danger\" onClick={this.confirmDelete}>\r\n            <FontAwesomeIcon icon=\"trash\" />&nbsp; Delete\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user\r\n});\r\n\r\nconst mapDispatchToProps = { getUser, deleteUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagementDeleteDialog);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Badge } from 'reactstrap';\r\nimport { TextFormat } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\n\r\nimport { getUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementDetailProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport class UserManagementDetail extends React.Component<IUserManagementDetailProps> {\r\n  componentDidMount() {\r\n    this.props.getUser(this.props.match.params.login);\r\n  }\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    return (\r\n      <div>\r\n        <h2>\r\n          User [<b>{user.login}</b>]\r\n        </h2>\r\n        <Row size=\"md\">\r\n          <dl className=\"jh-entity-details\">\r\n            <dt>Login</dt>\r\n            <dd>\r\n              <span>{user.login}</span>&nbsp;\r\n              {user.activated ? <Badge color=\"success\">Activated</Badge> : <Badge color=\"danger\">Deactivated</Badge>}\r\n            </dd>\r\n            <dt>First Name</dt>\r\n            <dd>{user.firstName}</dd>\r\n            <dt>Last Name</dt>\r\n            <dd>{user.lastName}</dd>\r\n            <dt>Email</dt>\r\n            <dd>{user.email}</dd>\r\n            <dt>Created By</dt>\r\n            <dd>{user.createdBy}</dd>\r\n            <dt>Created Date</dt>\r\n            <dd>\r\n              <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n            </dd>\r\n            <dt>Last Modified By</dt>\r\n            <dd>{user.lastModifiedBy}</dd>\r\n            <dt>Last Modified Date</dt>\r\n            <dd>\r\n              <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n            </dd>\r\n            <dt>Profiles</dt>\r\n            <dd>\r\n              <ul className=\"list-unstyled\">\r\n                {user.authorities\r\n                  ? user.authorities.map((authority, i) => (\r\n                      <li key={`user-auth-${i}`}>\r\n                        <Badge color=\"info\">{authority}</Badge>\r\n                      </li>\r\n                    ))\r\n                  : null}\r\n              </ul>\r\n            </dd>\r\n          </dl>\r\n        </Row>\r\n        <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n          <FontAwesomeIcon icon=\"arrow-left\" /> <span className=\"d-none d-md-inline\">Back</span>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user\r\n});\r\n\r\nconst mapDispatchToProps = { getUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagementDetail);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\r\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ login: string }> {}\r\n\r\nexport interface IUserManagementUpdateState {\r\n  isNew: boolean;\r\n}\r\n\r\nexport class UserManagementUpdate extends React.Component<IUserManagementUpdateProps, IUserManagementUpdateState> {\r\n  state: IUserManagementUpdateState = {\r\n    isNew: !this.props.match.params || !this.props.match.params.login\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.state.isNew) {\r\n      this.props.reset();\r\n    } else {\r\n      this.props.getUser(this.props.match.params.login);\r\n    }\r\n    this.props.getRoles();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.reset();\r\n  }\r\n\r\n  saveUser = (event, values) => {\r\n    if (this.state.isNew) {\r\n      this.props.createUser(values);\r\n    } else {\r\n      this.props.updateUser(values);\r\n    }\r\n    this.handleClose();\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.history.push('/admin/user-management');\r\n  };\r\n\r\n  render() {\r\n    const isInvalid = false;\r\n    const { user, loading, updating, roles } = this.props;\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h1>Create or edit a User</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            {loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <AvForm onValidSubmit={this.saveUser}>\r\n                {user.id ? (\r\n                  <AvGroup>\r\n                    <Label for=\"id\">ID</Label>\r\n                    <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly value={user.id} />\r\n                  </AvGroup>\r\n                ) : null}\r\n                <AvGroup>\r\n                  <Label for=\"login\">Login</Label>\r\n                  <AvField\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"login\"\r\n                    validate={{\r\n                      required: {\r\n                        value: true,\r\n                        errorMessage: 'Your username is required.'\r\n                      },\r\n                      pattern: {\r\n                        value: '^[_.@A-Za-z0-9-]*$',\r\n                        errorMessage: 'Your username can only contain letters and digits.'\r\n                      },\r\n                      minLength: {\r\n                        value: 1,\r\n                        errorMessage: 'Your username is required to be at least 1 character.'\r\n                      },\r\n                      maxLength: {\r\n                        value: 50,\r\n                        errorMessage: 'Your username cannot be longer than 50 characters.'\r\n                      }\r\n                    }}\r\n                    value={user.login}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"firstName\">First Name</Label>\r\n                  <AvField\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"firstName\"\r\n                    validate={{\r\n                      maxLength: {\r\n                        value: 50,\r\n                        errorMessage: 'This field cannot be longer than 50 characters.'\r\n                      }\r\n                    }}\r\n                    value={user.firstName}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"lastName\">Last Name</Label>\r\n                  <AvField\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    name=\"lastName\"\r\n                    validate={{\r\n                      maxLength: {\r\n                        value: 50,\r\n                        errorMessage: 'This field cannot be longer than 50 characters.'\r\n                      }\r\n                    }}\r\n                    value={user.lastName}\r\n                  />\r\n                  <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <AvField\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    placeholder=\"Your email\"\r\n                    type=\"email\"\r\n                    validate={{\r\n                      required: {\r\n                        value: true,\r\n                        errorMessage: 'Your email is required.'\r\n                      },\r\n                      email: {\r\n                        errorMessage: 'Your email is invalid.'\r\n                      },\r\n                      minLength: {\r\n                        value: 5,\r\n                        errorMessage: 'Your email is required to be at least 5 characters.'\r\n                      },\r\n                      maxLength: {\r\n                        value: 254,\r\n                        errorMessage: 'Your email cannot be longer than 50 characters.'\r\n                      }\r\n                    }}\r\n                    value={user.email}\r\n                  />\r\n                </AvGroup>\r\n                <AvGroup check>\r\n                  <Label>\r\n                    <AvInput type=\"checkbox\" name=\"activated\" value={user.activated} /> Activated\r\n                  </Label>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"authorities\">Language Key</Label>\r\n                  <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\r\n                    {roles.map(role => (\r\n                      <option value={role} key={role}>\r\n                        {role}\r\n                      </option>\r\n                    ))}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\r\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\r\n                  <span className=\"d-none d-md-inline\">Back</span>\r\n                </Button>\r\n                &nbsp;\r\n                <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\r\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\r\n                </Button>\r\n              </AvForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  user: storeState.userManagement.user,\r\n  roles: storeState.userManagement.authorities,\r\n  loading: storeState.userManagement.loading,\r\n  updating: storeState.userManagement.updating\r\n});\r\n\r\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagementUpdate);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Table, Row, Badge } from 'reactstrap';\r\nimport {\r\n  ICrudGetAllAction,\r\n  ICrudPutAction,\r\n  TextFormat,\r\n  JhiPagination,\r\n  getPaginationItemsNumber,\r\n  getSortState,\r\n  IPaginationBaseState\r\n} from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { APP_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nimport { getUsers, updateUser } from './user-management.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface IUserManagementProps extends StateProps, DispatchProps, RouteComponentProps<{}> {}\r\n\r\nexport class UserManagement extends React.Component<IUserManagementProps, IPaginationBaseState> {\r\n  state: IPaginationBaseState = {\r\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getUsers();\r\n  }\r\n\r\n  sort = prop => () => {\r\n    this.setState(\r\n      {\r\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\r\n        sort: prop\r\n      },\r\n      () => this.sortUsers()\r\n    );\r\n  };\r\n\r\n  sortUsers() {\r\n    this.getUsers();\r\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\r\n  }\r\n\r\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortUsers());\r\n\r\n  getUsers = () => {\r\n    const { activePage, itemsPerPage, sort, order } = this.state;\r\n    this.props.getUsers(activePage - 1, itemsPerPage, `${sort},${order}`);\r\n  };\r\n\r\n  toggleActive = user => () => {\r\n    this.props.updateUser({\r\n      ...user,\r\n      activated: !user.activated\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { users, account, match, totalItems } = this.props;\r\n    return (\r\n      <div>\r\n        <h2 id=\"user-management-page-heading\">\r\n          Users\r\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\">\r\n            <FontAwesomeIcon icon=\"plus\" /> Create a new user\r\n          </Link>\r\n        </h2>\r\n        <Table responsive striped>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"hand\" onClick={this.sort('id')}>\r\n                ID<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th className=\"hand\" onClick={this.sort('login')}>\r\n                Login<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th className=\"hand\" onClick={this.sort('email')}>\r\n                Email<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th />\r\n              <th>Profiles</th>\r\n              <th className=\"hand\" onClick={this.sort('createdDate')}>\r\n                Created Date<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th className=\"hand\" onClick={this.sort('lastModifiedBy')}>\r\n                Last Modified By<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th id=\"modified-date-sort\" className=\"hand\" onClick={this.sort('lastModifiedDate')}>\r\n                Last Modified Date<FontAwesomeIcon icon=\"sort\" />\r\n              </th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {users.map((user, i) => (\r\n              <tr id={user.login} key={`user-${i}`}>\r\n                <td>\r\n                  <Button tag={Link} to={`${match.url}/${user.login}`} color=\"link\" size=\"sm\">\r\n                    {user.id}\r\n                  </Button>\r\n                </td>\r\n                <td>{user.login}</td>\r\n                <td>{user.email}</td>\r\n                <td>\r\n                  {user.activated ? (\r\n                    <Button color=\"success\" onClick={this.toggleActive(user)}>\r\n                      Activated\r\n                    </Button>\r\n                  ) : (\r\n                    <Button color=\"danger\" onClick={this.toggleActive(user)}>\r\n                      Deactivated\r\n                    </Button>\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {user.authorities\r\n                    ? user.authorities.map((authority, j) => (\r\n                        <div key={`user-auth-${i}-${j}`}>\r\n                          <Badge color=\"info\">{authority}</Badge>\r\n                        </div>\r\n                      ))\r\n                    : null}\r\n                </td>\r\n                <td>\r\n                  <TextFormat value={user.createdDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n                </td>\r\n                <td>{user.lastModifiedBy}</td>\r\n                <td>\r\n                  <TextFormat value={user.lastModifiedDate} type=\"date\" format={APP_DATE_FORMAT} blankOnInvalid />\r\n                </td>\r\n                <td className=\"text-right\">\r\n                  <div className=\"btn-group flex-btn-group-container\">\r\n                    <Button tag={Link} to={`${match.url}/${user.login}`} color=\"info\" size=\"sm\">\r\n                      <FontAwesomeIcon icon=\"eye\" /> <span className=\"d-none d-md-inline\">View</span>\r\n                    </Button>\r\n                    <Button tag={Link} to={`${match.url}/${user.login}/edit`} color=\"primary\" size=\"sm\">\r\n                      <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\">Edit</span>\r\n                    </Button>\r\n                    <Button\r\n                      tag={Link}\r\n                      to={`${match.url}/${user.login}/delete`}\r\n                      color=\"danger\"\r\n                      size=\"sm\"\r\n                      disabled={account.login === user.login}\r\n                    >\r\n                      <FontAwesomeIcon icon=\"trash\" /> <span className=\"d-none d-md-inline\">Delete</span>\r\n                    </Button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <Row className=\"justify-content-center\">\r\n          <JhiPagination\r\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\r\n            activePage={this.state.activePage}\r\n            onSelect={this.handlePagination}\r\n            maxButtons={5}\r\n          />\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  users: storeState.userManagement.users,\r\n  totalItems: storeState.userManagement.totalItems,\r\n  account: storeState.authentication.account\r\n});\r\n\r\nconst mapDispatchToProps = { getUsers, updateUser };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserManagement);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAuDA;AAhGA;AACA;AACA;AAyCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AAEA;;AAEA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AAEA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;;AA2EA;AAtGA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAGA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;AC1IA;AAAA;AAAA;AAAA;AAEA;AAEA;AAIA;AACA;AACA;;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAEA;AACA;AAGA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAkDA;AA/EA;AACA;AACA;AA6BA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AATA;AAoBA;AAGA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AAEA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAkFA;AAxGA;AACA;AACA;AAsBA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AAOA;AAOA;AAOA;AAcA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AAWA;AAEA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;;AAmFA;AA7FA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAeA;AAKA;AASA;AAMA;AAEA;AACA;AAOA;AAEA;AACA;AAWA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;AC3IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AARA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AAEA;AAGA;AAKA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAmBA;AA/BA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAAA;AAAA;;AAyDA;AAxDA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;;AAAA;AAIA;AACA;AAAA;;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AAEA;AAEA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AA0IA;AAlKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;;AACA;;AAGA;AACA;AACA;AAOA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxMA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAGA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;;AA6GA;AA5IA;AACA;AACA;AAYA;AACA;AACA;AACA;AAgBA;AAAA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAEA;;AACA;AAEA;;AACA;AAEA;AACA;AACA;;AACA;AAEA;;AACA;AAEA;;AACA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AAWA;AAEA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AAOA;;AAAA;AAQA;AACA;AASA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;;;;;;A","sourceRoot":""}