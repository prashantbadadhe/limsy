{"remainingRequest":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","dependencies":[{"path":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","mtime":1549223105112},{"path":"H:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"H:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Alert, Button } from 'reactstrap';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { handleRegister, reset } from './register.reducer';\r\nvar RegisterPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RegisterPage, _super);\r\n    function RegisterPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            password: ''\r\n        };\r\n        _this.handleValidSubmit = function (event, values) {\r\n            _this.props.handleRegister(values.username, values.email, values.firstPassword);\r\n            event.preventDefault();\r\n        };\r\n        _this.updatePassword = function (event) {\r\n            _this.setState({ password: event.target.value });\r\n        };\r\n        return _this;\r\n    }\r\n    RegisterPage.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    RegisterPage.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h1\", { id: \"register-title\" }, \"Registration\"))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(AvForm, { id: \"register-form\", onValidSubmit: this.handleValidSubmit },\r\n                        React.createElement(AvField, { name: \"username\", label: \"Username\", placeholder: \"Your username\", validate: {\r\n                                required: { value: true, errorMessage: 'Your username is required.' },\r\n                                pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: 'Your username can only contain letters and digits.' },\r\n                                minLength: { value: 1, errorMessage: 'Your username is required to be at least 1 character.' },\r\n                                maxLength: { value: 50, errorMessage: 'Your username cannot be longer than 50 characters.' }\r\n                            } }),\r\n                        React.createElement(AvField, { name: \"email\", label: \"Email\", placeholder: \"Your email\", type: \"email\", validate: {\r\n                                required: { value: true, errorMessage: 'Your email is required.' },\r\n                                minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\r\n                                maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\r\n                            } }),\r\n                        React.createElement(AvField, { name: \"firstPassword\", label: \"New password\", placeholder: \"New password\", type: \"password\", onChange: this.updatePassword, validate: {\r\n                                required: { value: true, errorMessage: 'Your password is required.' },\r\n                                minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\r\n                                maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\r\n                            } }),\r\n                        React.createElement(PasswordStrengthBar, { password: this.state.password }),\r\n                        React.createElement(AvField, { name: \"secondPassword\", label: \"New password confirmation\", placeholder: \"Confirm the new password\", type: \"password\", validate: {\r\n                                required: { value: true, errorMessage: 'Your confirmation password is required.' },\r\n                                minLength: { value: 4, errorMessage: 'Your confirmation password is required to be at least 4 characters.' },\r\n                                maxLength: { value: 50, errorMessage: 'Your confirmation password cannot be longer than 50 characters.' },\r\n                                match: { value: 'firstPassword', errorMessage: 'The password and its confirmation do not match!' }\r\n                            } }),\r\n                        React.createElement(Button, { id: \"register-submit\", color: \"primary\", type: \"submit\" }, \"Register\")),\r\n                    React.createElement(\"p\", null, \"\\u00A0\"),\r\n                    React.createElement(Alert, { color: \"warning\" },\r\n                        React.createElement(\"span\", null, \"If you want to\"),\r\n                        React.createElement(\"a\", { className: \"alert-link\" }, \" sign in\"),\r\n                        React.createElement(\"span\", null,\r\n                            \", you can try the default accounts:\",\r\n                            React.createElement(\"br\", null),\r\n                            \"- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")\",\r\n                            React.createElement(\"br\", null),\r\n                            \"- User (login=\\\"user\\\" and password=\\\"user\\\").\"))))));\r\n    };\r\n    return RegisterPage;\r\n}(React.Component));\r\nexport { RegisterPage };\r\nvar mapDispatchToProps = { handleRegister: handleRegister, reset: reset };\r\nexport default connect(null, mapDispatchToProps)(RegisterPage);\r\n",{"version":3,"file":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx","sourceRoot":"","sources":["H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\register\\register.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Alert, Button } from 'reactstrap';\r\n\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { handleRegister, reset } from './register.reducer';\r\n\r\nexport type IRegisterProps = DispatchProps;\r\n\r\nexport interface IRegisterState {\r\n  password: string;\r\n}\r\n\r\nexport class RegisterPage extends React.Component<IRegisterProps, IRegisterState> {\r\n  state: IRegisterState = {\r\n    password: ''\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.props.reset();\r\n  }\r\n\r\n  handleValidSubmit = (event, values) => {\r\n    this.props.handleRegister(values.username, values.email, values.firstPassword);\r\n    event.preventDefault();\r\n  };\r\n\r\n  updatePassword = event => {\r\n    this.setState({ password: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h1 id=\"register-title\">Registration</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <AvForm id=\"register-form\" onValidSubmit={this.handleValidSubmit}>\r\n              <AvField\r\n                name=\"username\"\r\n                label=\"Username\"\r\n                placeholder=\"Your username\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your username is required.' },\r\n                  pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: 'Your username can only contain letters and digits.' },\r\n                  minLength: { value: 1, errorMessage: 'Your username is required to be at least 1 character.' },\r\n                  maxLength: { value: 50, errorMessage: 'Your username cannot be longer than 50 characters.' }\r\n                }}\r\n              />\r\n              <AvField\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                placeholder=\"Your email\"\r\n                type=\"email\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your email is required.' },\r\n                  minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\r\n                  maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\r\n                }}\r\n              />\r\n              <AvField\r\n                name=\"firstPassword\"\r\n                label=\"New password\"\r\n                placeholder=\"New password\"\r\n                type=\"password\"\r\n                onChange={this.updatePassword}\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your password is required.' },\r\n                  minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\r\n                  maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\r\n                }}\r\n              />\r\n              <PasswordStrengthBar password={this.state.password} />\r\n              <AvField\r\n                name=\"secondPassword\"\r\n                label=\"New password confirmation\"\r\n                placeholder=\"Confirm the new password\"\r\n                type=\"password\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your confirmation password is required.' },\r\n                  minLength: { value: 4, errorMessage: 'Your confirmation password is required to be at least 4 characters.' },\r\n                  maxLength: { value: 50, errorMessage: 'Your confirmation password cannot be longer than 50 characters.' },\r\n                  match: { value: 'firstPassword', errorMessage: 'The password and its confirmation do not match!' }\r\n                }}\r\n              />\r\n              <Button id=\"register-submit\" color=\"primary\" type=\"submit\">\r\n                Register\r\n              </Button>\r\n            </AvForm>\r\n            <p>&nbsp;</p>\r\n            <Alert color=\"warning\">\r\n              <span>If you want to</span>\r\n              <a className=\"alert-link\"> sign in</a>\r\n              <span>\r\n                , you can try the default accounts:\r\n                <br />- Administrator (login=\"admin\" and password=\"admin\")\r\n                <br />- User (login=\"user\" and password=\"user\").\r\n              </span>\r\n            </Alert>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { handleRegister, reset };\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(RegisterPage);\r\n"]}]}