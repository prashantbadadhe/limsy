{"remainingRequest":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\suggestion\\suggestion.tsx","dependencies":[{"path":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\suggestion\\suggestion.tsx","mtime":1556391440908},{"path":"H:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"H:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Table } from 'reactstrap';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { TextFormat, getSortState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities, reset } from './suggestion.reducer';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\nvar Suggestion = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Suggestion, _super);\r\n    function Suggestion() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = tslib_1.__assign({}, getSortState(_this.props.location, ITEMS_PER_PAGE));\r\n        _this.reset = function () {\r\n            _this.props.reset();\r\n            _this.setState({ activePage: 1 }, function () {\r\n                _this.getEntities();\r\n            });\r\n        };\r\n        _this.handleLoadMore = function () {\r\n            if (window.pageYOffset > 0) {\r\n                _this.setState({ activePage: _this.state.activePage + 1 }, function () { return _this.getEntities(); });\r\n            }\r\n        };\r\n        _this.sort = function (prop) { return function () {\r\n            _this.setState({\r\n                order: _this.state.order === 'asc' ? 'desc' : 'asc',\r\n                sort: prop\r\n            }, function () {\r\n                _this.reset();\r\n            });\r\n        }; };\r\n        _this.getEntities = function () {\r\n            var _a = _this.state, activePage = _a.activePage, itemsPerPage = _a.itemsPerPage, sort = _a.sort, order = _a.order;\r\n            _this.props.getEntities(activePage - 1, itemsPerPage, sort + \",\" + order);\r\n        };\r\n        return _this;\r\n    }\r\n    Suggestion.prototype.componentDidMount = function () {\r\n        this.reset();\r\n    };\r\n    Suggestion.prototype.componentDidUpdate = function () {\r\n        if (this.props.updateSuccess) {\r\n            this.reset();\r\n        }\r\n    };\r\n    Suggestion.prototype.render = function () {\r\n        var _a = this.props, suggestionList = _a.suggestionList, match = _a.match;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { id: \"suggestion-heading\" },\r\n                \"Suggestions\",\r\n                React.createElement(Link, { to: match.url + \"/new\", className: \"btn btn-primary float-right jh-create-entity\", id: \"jh-create-entity\" },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"plus\" }),\r\n                    \"\\u00A0 Create new Suggestion\")),\r\n            React.createElement(\"div\", { className: \"table-responsive\" },\r\n                React.createElement(InfiniteScroll, { pageStart: this.state.activePage, loadMore: this.handleLoadMore, hasMore: this.state.activePage - 1 < this.props.links.next, loader: React.createElement(\"div\", { className: \"loader\" }, \"Loading ...\"), threshold: 0, initialLoad: false },\r\n                    React.createElement(Table, { responsive: true },\r\n                        React.createElement(\"thead\", null,\r\n                            React.createElement(\"tr\", null,\r\n                                React.createElement(\"th\", { className: \"hand\", onClick: this.sort('id') },\r\n                                    \"ID \",\r\n                                    React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                                React.createElement(\"th\", { className: \"hand\", onClick: this.sort('date') },\r\n                                    \"Date \",\r\n                                    React.createElement(FontAwesomeIcon, { icon: \"sort\" })),\r\n                                React.createElement(\"th\", null))),\r\n                        React.createElement(\"tbody\", null, suggestionList.map(function (suggestion, i) { return (React.createElement(\"tr\", { key: \"entity-\" + i },\r\n                            React.createElement(\"td\", null,\r\n                                React.createElement(Button, { tag: Link, to: match.url + \"/\" + suggestion.id, color: \"link\", size: \"sm\" }, suggestion.id)),\r\n                            React.createElement(\"td\", null,\r\n                                React.createElement(TextFormat, { type: \"date\", value: suggestion.date, format: APP_LOCAL_DATE_FORMAT })),\r\n                            React.createElement(\"td\", { className: \"text-right\" },\r\n                                React.createElement(\"div\", { className: \"btn-group flex-btn-group-container\" },\r\n                                    React.createElement(Button, { tag: Link, to: match.url + \"/\" + suggestion.id, color: \"info\", size: \"sm\" },\r\n                                        React.createElement(FontAwesomeIcon, { icon: \"eye\" }),\r\n                                        \" \",\r\n                                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"View\")),\r\n                                    React.createElement(Button, { tag: Link, to: match.url + \"/\" + suggestion.id + \"/edit\", color: \"primary\", size: \"sm\" },\r\n                                        React.createElement(FontAwesomeIcon, { icon: \"pencil-alt\" }),\r\n                                        \" \",\r\n                                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Edit\")),\r\n                                    React.createElement(Button, { tag: Link, to: match.url + \"/\" + suggestion.id + \"/delete\", color: \"danger\", size: \"sm\" },\r\n                                        React.createElement(FontAwesomeIcon, { icon: \"trash\" }),\r\n                                        \" \",\r\n                                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Delete\")))))); })))))));\r\n    };\r\n    return Suggestion;\r\n}(React.Component));\r\nexport { Suggestion };\r\nvar mapStateToProps = function (_a) {\r\n    var suggestion = _a.suggestion;\r\n    return ({\r\n        suggestionList: suggestion.entities,\r\n        totalItems: suggestion.totalItems,\r\n        links: suggestion.links,\r\n        entity: suggestion.entity,\r\n        updateSuccess: suggestion.updateSuccess\r\n    });\r\n};\r\nvar mapDispatchToProps = {\r\n    getEntities: getEntities,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Suggestion);\r\n",{"version":3,"file":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\suggestion\\suggestion.tsx","sourceRoot":"","sources":["H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\suggestion\\suggestion.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Col, Row, Table } from 'reactstrap';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { ICrudGetAllAction, TextFormat, getSortState, IPaginationBaseState } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getEntities, reset } from './suggestion.reducer';\r\nimport { ISuggestion } from 'app/shared/model/suggestion.model';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\r\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\r\n\r\nexport interface ISuggestionProps extends StateProps, DispatchProps, RouteComponentProps<{ url: string }> {}\r\n\r\nexport type ISuggestionState = IPaginationBaseState;\r\n\r\nexport class Suggestion extends React.Component<ISuggestionProps, ISuggestionState> {\r\n  state: ISuggestionState = {\r\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.reset();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.updateSuccess) {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  reset = () => {\r\n    this.props.reset();\r\n    this.setState({ activePage: 1 }, () => {\r\n      this.getEntities();\r\n    });\r\n  };\r\n\r\n  handleLoadMore = () => {\r\n    if (window.pageYOffset > 0) {\r\n      this.setState({ activePage: this.state.activePage + 1 }, () => this.getEntities());\r\n    }\r\n  };\r\n\r\n  sort = prop => () => {\r\n    this.setState(\r\n      {\r\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\r\n        sort: prop\r\n      },\r\n      () => {\r\n        this.reset();\r\n      }\r\n    );\r\n  };\r\n\r\n  getEntities = () => {\r\n    const { activePage, itemsPerPage, sort, order } = this.state;\r\n    this.props.getEntities(activePage - 1, itemsPerPage, `${sort},${order}`);\r\n  };\r\n\r\n  render() {\r\n    const { suggestionList, match } = this.props;\r\n    return (\r\n      <div>\r\n        <h2 id=\"suggestion-heading\">\r\n          Suggestions\r\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\" id=\"jh-create-entity\">\r\n            <FontAwesomeIcon icon=\"plus\" />&nbsp; Create new Suggestion\r\n          </Link>\r\n        </h2>\r\n        <div className=\"table-responsive\">\r\n          <InfiniteScroll\r\n            pageStart={this.state.activePage}\r\n            loadMore={this.handleLoadMore}\r\n            hasMore={this.state.activePage - 1 < this.props.links.next}\r\n            loader={<div className=\"loader\">Loading ...</div>}\r\n            threshold={0}\r\n            initialLoad={false}\r\n          >\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"hand\" onClick={this.sort('id')}>\r\n                    ID <FontAwesomeIcon icon=\"sort\" />\r\n                  </th>\r\n                  <th className=\"hand\" onClick={this.sort('date')}>\r\n                    Date <FontAwesomeIcon icon=\"sort\" />\r\n                  </th>\r\n                  <th />\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {suggestionList.map((suggestion, i) => (\r\n                  <tr key={`entity-${i}`}>\r\n                    <td>\r\n                      <Button tag={Link} to={`${match.url}/${suggestion.id}`} color=\"link\" size=\"sm\">\r\n                        {suggestion.id}\r\n                      </Button>\r\n                    </td>\r\n                    <td>\r\n                      <TextFormat type=\"date\" value={suggestion.date} format={APP_LOCAL_DATE_FORMAT} />\r\n                    </td>\r\n                    <td className=\"text-right\">\r\n                      <div className=\"btn-group flex-btn-group-container\">\r\n                        <Button tag={Link} to={`${match.url}/${suggestion.id}`} color=\"info\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"eye\" /> <span className=\"d-none d-md-inline\">View</span>\r\n                        </Button>\r\n                        <Button tag={Link} to={`${match.url}/${suggestion.id}/edit`} color=\"primary\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"pencil-alt\" /> <span className=\"d-none d-md-inline\">Edit</span>\r\n                        </Button>\r\n                        <Button tag={Link} to={`${match.url}/${suggestion.id}/delete`} color=\"danger\" size=\"sm\">\r\n                          <FontAwesomeIcon icon=\"trash\" /> <span className=\"d-none d-md-inline\">Delete</span>\r\n                        </Button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </InfiniteScroll>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ suggestion }: IRootState) => ({\r\n  suggestionList: suggestion.entities,\r\n  totalItems: suggestion.totalItems,\r\n  links: suggestion.links,\r\n  entity: suggestion.entity,\r\n  updateSuccess: suggestion.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getEntities,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Suggestion);\r\n"]}]}