{"remainingRequest":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx","dependencies":[{"path":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx","mtime":1549223105111},{"path":"G:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"G:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Button, Alert, Col, Row } from 'reactstrap';\r\nimport { handlePasswordResetInit, reset } from '../password-reset.reducer';\r\nvar PasswordResetInit = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PasswordResetInit, _super);\r\n    function PasswordResetInit() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.handleValidSubmit = function (event, values) {\r\n            _this.props.handlePasswordResetInit(values.email);\r\n            event.preventDefault();\r\n        };\r\n        return _this;\r\n    }\r\n    PasswordResetInit.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    PasswordResetInit.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h1\", null, \"Reset your password\"),\r\n                    React.createElement(Alert, { color: \"warning\" },\r\n                        React.createElement(\"p\", null, \"Enter the email address you used to register\")),\r\n                    React.createElement(AvForm, { onValidSubmit: this.handleValidSubmit },\r\n                        React.createElement(AvField, { name: \"email\", label: \"Email\", placeholder: \"Your email\", type: \"email\", validate: {\r\n                                required: { value: true, errorMessage: 'Your email is required.' },\r\n                                minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\r\n                                maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\r\n                            } }),\r\n                        React.createElement(Button, { color: \"primary\", type: \"submit\" }, \"Reset password\"))))));\r\n    };\r\n    return PasswordResetInit;\r\n}(React.Component));\r\nexport { PasswordResetInit };\r\nvar mapDispatchToProps = { handlePasswordResetInit: handlePasswordResetInit, reset: reset };\r\nexport default connect(null, mapDispatchToProps)(PasswordResetInit);\r\n",{"version":3,"file":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx","sourceRoot":"","sources":["G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\init\\password-reset-init.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,gCAAgC,CAAC;AACjE,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAGrD,OAAO,EAAE,uBAAuB,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAI3E;IAAuC,6CAAwC;IAA/E;QAAA,qEAwCC;QAnCC,uBAAiB,GAAG,UAAC,KAAK,EAAE,MAAM;YAChC,KAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjD,KAAK,CAAC,cAAc,EAAE,CAAC;QACzB,CAAC,CAAC;;IAgCJ,CAAC;IAvCC,gDAAoB,GAApB;QACE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAOD,kCAAM,GAAN;QACE,OAAO,CACL;YACE,oBAAC,GAAG,IAAC,SAAS,EAAC,wBAAwB;gBACrC,oBAAC,GAAG,IAAC,EAAE,EAAC,GAAG;oBACT,sDAA4B;oBAC5B,oBAAC,KAAK,IAAC,KAAK,EAAC,SAAS;wBACpB,8EAAmD,CAC7C;oBACR,oBAAC,MAAM,IAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB;wBAC3C,oBAAC,OAAO,IACN,IAAI,EAAC,OAAO,EACZ,KAAK,EAAC,OAAO,EACb,WAAW,EAAC,YAAY,EACxB,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,yBAAyB,EAAE;gCAClE,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,qDAAqD,EAAE;gCAC5F,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,iDAAiD,EAAE;6BAC3F,GACD;wBACF,oBAAC,MAAM,IAAC,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,QAAQ,qBAE5B,CACF,CACL,CACF,CACF,CACP,CAAC;IACJ,CAAC;IACH,wBAAC;AAAD,CAAC,AAxCD,CAAuC,KAAK,CAAC,SAAS,GAwCrD;;AAED,IAAM,kBAAkB,GAAG,EAAE,uBAAuB,yBAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AAI9D,eAAe,OAAO,CACpB,IAAI,EACJ,kBAAkB,CACnB,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Button, Alert, Col, Row } from 'reactstrap';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { handlePasswordResetInit, reset } from '../password-reset.reducer';\r\n\r\nexport type IPasswordResetInitProps = DispatchProps;\r\n\r\nexport class PasswordResetInit extends React.Component<IPasswordResetInitProps> {\r\n  componentWillUnmount() {\r\n    this.props.reset();\r\n  }\r\n\r\n  handleValidSubmit = (event, values) => {\r\n    this.props.handlePasswordResetInit(values.email);\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h1>Reset your password</h1>\r\n            <Alert color=\"warning\">\r\n              <p>Enter the email address you used to register</p>\r\n            </Alert>\r\n            <AvForm onValidSubmit={this.handleValidSubmit}>\r\n              <AvField\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                placeholder=\"Your email\"\r\n                type=\"email\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your email is required.' },\r\n                  minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\r\n                  maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\r\n                }}\r\n              />\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Reset password\r\n              </Button>\r\n            </AvForm>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { handlePasswordResetInit, reset };\r\n\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(PasswordResetInit);\r\n"]}]}