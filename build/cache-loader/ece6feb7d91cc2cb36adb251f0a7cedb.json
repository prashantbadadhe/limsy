{"remainingRequest":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\dress\\dress-update.tsx","dependencies":[{"path":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\dress\\dress-update.tsx","mtime":1556391440905},{"path":"H:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"H:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { setFileData, openFile, byteSize } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getCategories } from 'app/entities/category/category.reducer';\r\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './dress.reducer';\r\nvar DressUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DressUpdate, _super);\r\n    function DressUpdate(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.onBlobChange = function (isAnImage, name) { return function (event) {\r\n            setFileData(event, function (contentType, data) { return _this.props.setBlob(name, data, contentType); }, isAnImage);\r\n        }; };\r\n        _this.clearBlob = function (name) { return function () {\r\n            _this.props.setBlob(name, undefined, undefined);\r\n        }; };\r\n        _this.saveEntity = function (event, errors, values) {\r\n            if (errors.length === 0) {\r\n                var dressEntity = _this.props.dressEntity;\r\n                var entity = tslib_1.__assign({}, dressEntity, values);\r\n                if (_this.state.isNew) {\r\n                    _this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    _this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/entity/dress');\r\n        };\r\n        _this.state = {\r\n            categoryId: '0',\r\n            isNew: !_this.props.match.params || !_this.props.match.params.id\r\n        };\r\n        return _this;\r\n    }\r\n    DressUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    };\r\n    DressUpdate.prototype.componentDidMount = function () {\r\n        if (!this.state.isNew) {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getCategories();\r\n    };\r\n    DressUpdate.prototype.render = function () {\r\n        var _a = this.props, dressEntity = _a.dressEntity, categories = _a.categories, loading = _a.loading, updating = _a.updating;\r\n        var isNew = this.state.isNew;\r\n        var image = dressEntity.image, imageContentType = dressEntity.imageContentType;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"limsyApp.dress.home.createOrEditLabel\" }, \"Create or edit a Dress\"))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : dressEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" }, \"ID\"),\r\n                        React.createElement(AvInput, { id: \"dress-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"colorLabel\", for: \"color\" }, \"Color\"),\r\n                        React.createElement(AvField, { id: \"dress-color\", type: \"text\", name: \"color\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"purchaseDateLabel\", for: \"purchaseDate\" }, \"Purchase Date\"),\r\n                        React.createElement(AvField, { id: \"dress-purchaseDate\", type: \"date\", className: \"form-control\", name: \"purchaseDate\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"priceLabel\", for: \"price\" }, \"Price\"),\r\n                        React.createElement(AvField, { id: \"dress-price\", type: \"string\", className: \"form-control\", name: \"price\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"inUseLabel\", check: true },\r\n                            React.createElement(AvInput, { id: \"dress-inUse\", type: \"checkbox\", className: \"form-control\", name: \"inUse\" }),\r\n                            \"In Use\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(AvGroup, null,\r\n                            React.createElement(Label, { id: \"imageLabel\", for: \"image\" }, \"Image\"),\r\n                            React.createElement(\"br\", null),\r\n                            image ? (React.createElement(\"div\", null,\r\n                                React.createElement(\"a\", { onClick: openFile(imageContentType, image) },\r\n                                    React.createElement(\"img\", { src: \"data:\" + imageContentType + \";base64,\" + image, style: { maxHeight: '100px' } })),\r\n                                React.createElement(\"br\", null),\r\n                                React.createElement(Row, null,\r\n                                    React.createElement(Col, { md: \"11\" },\r\n                                        React.createElement(\"span\", null,\r\n                                            imageContentType,\r\n                                            \", \",\r\n                                            byteSize(image))),\r\n                                    React.createElement(Col, { md: \"1\" },\r\n                                        React.createElement(Button, { color: \"danger\", onClick: this.clearBlob('image') },\r\n                                            React.createElement(FontAwesomeIcon, { icon: \"times-circle\" })))))) : null,\r\n                            React.createElement(\"input\", { id: \"file_image\", type: \"file\", onChange: this.onBlobChange(true, 'image'), accept: \"image/*\" }),\r\n                            React.createElement(AvInput, { type: \"hidden\", name: \"image\", value: image }))),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"category.name\" }, \"Category\"),\r\n                        React.createElement(AvInput, { id: \"dress-category\", type: \"select\", className: \"form-control\", name: \"category.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            categories\r\n                                ? categories.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.name)); })\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/dress\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Back\")),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0 Save\")))))));\r\n    };\r\n    return DressUpdate;\r\n}(React.Component));\r\nexport { DressUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    categories: storeState.category.entities,\r\n    dressEntity: storeState.dress.entity,\r\n    loading: storeState.dress.loading,\r\n    updating: storeState.dress.updating,\r\n    updateSuccess: storeState.dress.updateSuccess\r\n}); };\r\nvar mapDispatchToProps = {\r\n    getCategories: getCategories,\r\n    getEntity: getEntity,\r\n    updateEntity: updateEntity,\r\n    setBlob: setBlob,\r\n    createEntity: createEntity,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DressUpdate);\r\n",{"version":3,"file":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\dress\\dress-update.tsx","sourceRoot":"","sources":["H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\dress\\dress-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { ICrudGetAction, ICrudGetAllAction, setFileData, openFile, byteSize, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nimport { ICategory } from 'app/shared/model/category.model';\r\nimport { getEntities as getCategories } from 'app/entities/category/category.reducer';\r\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './dress.reducer';\r\nimport { IDress } from 'app/shared/model/dress.model';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\r\nimport { mapIdList } from 'app/shared/util/entity-utils';\r\n\r\nexport interface IDressUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IDressUpdateState {\r\n  isNew: boolean;\r\n  categoryId: string;\r\n}\r\n\r\nexport class DressUpdate extends React.Component<IDressUpdateProps, IDressUpdateState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      categoryId: '0',\r\n      isNew: !this.props.match.params || !this.props.match.params.id\r\n    };\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n      this.handleClose();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.state.isNew) {\r\n      this.props.getEntity(this.props.match.params.id);\r\n    }\r\n\r\n    this.props.getCategories();\r\n  }\r\n\r\n  onBlobChange = (isAnImage, name) => event => {\r\n    setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType), isAnImage);\r\n  };\r\n\r\n  clearBlob = name => () => {\r\n    this.props.setBlob(name, undefined, undefined);\r\n  };\r\n\r\n  saveEntity = (event, errors, values) => {\r\n    if (errors.length === 0) {\r\n      const { dressEntity } = this.props;\r\n      const entity = {\r\n        ...dressEntity,\r\n        ...values\r\n      };\r\n\r\n      if (this.state.isNew) {\r\n        this.props.createEntity(entity);\r\n      } else {\r\n        this.props.updateEntity(entity);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.history.push('/entity/dress');\r\n  };\r\n\r\n  render() {\r\n    const { dressEntity, categories, loading, updating } = this.props;\r\n    const { isNew } = this.state;\r\n\r\n    const { image, imageContentType } = dressEntity;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2 id=\"limsyApp.dress.home.createOrEditLabel\">Create or edit a Dress</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            {loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <AvForm model={isNew ? {} : dressEntity} onSubmit={this.saveEntity}>\r\n                {!isNew ? (\r\n                  <AvGroup>\r\n                    <Label for=\"id\">ID</Label>\r\n                    <AvInput id=\"dress-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\r\n                  </AvGroup>\r\n                ) : null}\r\n                <AvGroup>\r\n                  <Label id=\"colorLabel\" for=\"color\">\r\n                    Color\r\n                  </Label>\r\n                  <AvField id=\"dress-color\" type=\"text\" name=\"color\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"purchaseDateLabel\" for=\"purchaseDate\">\r\n                    Purchase Date\r\n                  </Label>\r\n                  <AvField id=\"dress-purchaseDate\" type=\"date\" className=\"form-control\" name=\"purchaseDate\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"priceLabel\" for=\"price\">\r\n                    Price\r\n                  </Label>\r\n                  <AvField id=\"dress-price\" type=\"string\" className=\"form-control\" name=\"price\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"inUseLabel\" check>\r\n                    <AvInput id=\"dress-inUse\" type=\"checkbox\" className=\"form-control\" name=\"inUse\" />\r\n                    In Use\r\n                  </Label>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <AvGroup>\r\n                    <Label id=\"imageLabel\" for=\"image\">\r\n                      Image\r\n                    </Label>\r\n                    <br />\r\n                    {image ? (\r\n                      <div>\r\n                        <a onClick={openFile(imageContentType, image)}>\r\n                          <img src={`data:${imageContentType};base64,${image}`} style={{ maxHeight: '100px' }} />\r\n                        </a>\r\n                        <br />\r\n                        <Row>\r\n                          <Col md=\"11\">\r\n                            <span>\r\n                              {imageContentType}, {byteSize(image)}\r\n                            </span>\r\n                          </Col>\r\n                          <Col md=\"1\">\r\n                            <Button color=\"danger\" onClick={this.clearBlob('image')}>\r\n                              <FontAwesomeIcon icon=\"times-circle\" />\r\n                            </Button>\r\n                          </Col>\r\n                        </Row>\r\n                      </div>\r\n                    ) : null}\r\n                    <input id=\"file_image\" type=\"file\" onChange={this.onBlobChange(true, 'image')} accept=\"image/*\" />\r\n                    <AvInput type=\"hidden\" name=\"image\" value={image} />\r\n                  </AvGroup>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"category.name\">Category</Label>\r\n                  <AvInput id=\"dress-category\" type=\"select\" className=\"form-control\" name=\"category.id\">\r\n                    <option value=\"\" key=\"0\" />\r\n                    {categories\r\n                      ? categories.map(otherEntity => (\r\n                          <option value={otherEntity.id} key={otherEntity.id}>\r\n                            {otherEntity.name}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/dress\" replace color=\"info\">\r\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\r\n                  <span className=\"d-none d-md-inline\">Back</span>\r\n                </Button>\r\n                &nbsp;\r\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\r\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\r\n                </Button>\r\n              </AvForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  categories: storeState.category.entities,\r\n  dressEntity: storeState.dress.entity,\r\n  loading: storeState.dress.loading,\r\n  updating: storeState.dress.updating,\r\n  updateSuccess: storeState.dress.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getCategories,\r\n  getEntity,\r\n  updateEntity,\r\n  setBlob,\r\n  createEntity,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DressUpdate);\r\n"]}]}