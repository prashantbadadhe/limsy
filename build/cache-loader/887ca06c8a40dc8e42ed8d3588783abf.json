{"remainingRequest":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","dependencies":[{"path":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","mtime":1549223105110},{"path":"H:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"H:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row, Button } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { getUrlParameter } from 'react-jhipster';\r\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nvar PasswordResetFinishPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PasswordResetFinishPage, _super);\r\n    function PasswordResetFinishPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            password: '',\r\n            key: getUrlParameter('key', _this.props.location.search)\r\n        };\r\n        _this.handleValidSubmit = function (event, values) {\r\n            _this.props.handlePasswordResetFinish(_this.state.key, values.newPassword);\r\n        };\r\n        _this.updatePassword = function (event) {\r\n            _this.setState({ password: event.target.value });\r\n        };\r\n        return _this;\r\n    }\r\n    PasswordResetFinishPage.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    PasswordResetFinishPage.prototype.getResetForm = function () {\r\n        return (React.createElement(AvForm, { onValidSubmit: this.handleValidSubmit },\r\n            React.createElement(AvField, { name: \"newPassword\", label: \"New password\", placeholder: 'New password', type: \"password\", validate: {\r\n                    required: { value: true, errorMessage: 'Your password is required.' },\r\n                    minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\r\n                    maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\r\n                }, onChange: this.updatePassword }),\r\n            React.createElement(PasswordStrengthBar, { password: this.state.password }),\r\n            React.createElement(AvField, { name: \"confirmPassword\", label: \"New password confirmation\", placeholder: \"Confirm the new password\", type: \"password\", validate: {\r\n                    required: { value: true, errorMessage: 'Your confirmation password is required.' },\r\n                    minLength: { value: 4, errorMessage: 'Your confirmation password is required to be at least 4 characters.' },\r\n                    maxLength: { value: 50, errorMessage: 'Your confirmation password cannot be longer than 50 characters.' },\r\n                    match: { value: 'newPassword', errorMessage: 'The password and its confirmation do not match!' }\r\n                } }),\r\n            React.createElement(Button, { color: \"success\", type: \"submit\" }, \"Validate new password\")));\r\n    };\r\n    PasswordResetFinishPage.prototype.render = function () {\r\n        var key = this.state.key;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"4\" },\r\n                    React.createElement(\"h1\", null, \"Reset password\"),\r\n                    React.createElement(\"div\", null, key ? this.getResetForm() : null)))));\r\n    };\r\n    return PasswordResetFinishPage;\r\n}(React.Component));\r\nexport { PasswordResetFinishPage };\r\nvar mapDispatchToProps = { handlePasswordResetFinish: handlePasswordResetFinish, reset: reset };\r\nexport default connect(null, mapDispatchToProps)(PasswordResetFinishPage);\r\n",{"version":3,"file":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx","sourceRoot":"","sources":["H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\finish\\password-reset-finish.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Alert, Col, Row, Button } from 'reactstrap';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { getUrlParameter } from 'react-jhipster';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\n\r\nexport interface IPasswordResetFinishProps extends DispatchProps, RouteComponentProps<{ key: string }> {}\r\n\r\nexport interface IPasswordResetFinishState {\r\n  password: string;\r\n  key: string;\r\n}\r\n\r\nexport class PasswordResetFinishPage extends React.Component<IPasswordResetFinishProps, IPasswordResetFinishState> {\r\n  state: IPasswordResetFinishState = {\r\n    password: '',\r\n    key: getUrlParameter('key', this.props.location.search)\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.props.reset();\r\n  }\r\n\r\n  handleValidSubmit = (event, values) => {\r\n    this.props.handlePasswordResetFinish(this.state.key, values.newPassword);\r\n  };\r\n\r\n  updatePassword = event => {\r\n    this.setState({ password: event.target.value });\r\n  };\r\n\r\n  getResetForm() {\r\n    return (\r\n      <AvForm onValidSubmit={this.handleValidSubmit}>\r\n        <AvField\r\n          name=\"newPassword\"\r\n          label=\"New password\"\r\n          placeholder={'New password'}\r\n          type=\"password\"\r\n          validate={{\r\n            required: { value: true, errorMessage: 'Your password is required.' },\r\n            minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\r\n            maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\r\n          }}\r\n          onChange={this.updatePassword}\r\n        />\r\n        <PasswordStrengthBar password={this.state.password} />\r\n        <AvField\r\n          name=\"confirmPassword\"\r\n          label=\"New password confirmation\"\r\n          placeholder=\"Confirm the new password\"\r\n          type=\"password\"\r\n          validate={{\r\n            required: { value: true, errorMessage: 'Your confirmation password is required.' },\r\n            minLength: { value: 4, errorMessage: 'Your confirmation password is required to be at least 4 characters.' },\r\n            maxLength: { value: 50, errorMessage: 'Your confirmation password cannot be longer than 50 characters.' },\r\n            match: { value: 'newPassword', errorMessage: 'The password and its confirmation do not match!' }\r\n          }}\r\n        />\r\n        <Button color=\"success\" type=\"submit\">\r\n          Validate new password\r\n        </Button>\r\n      </AvForm>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { key } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"4\">\r\n            <h1>Reset password</h1>\r\n            <div>{key ? this.getResetForm() : null}</div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { handlePasswordResetFinish, reset };\r\n\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(PasswordResetFinishPage);\r\n"]}]}