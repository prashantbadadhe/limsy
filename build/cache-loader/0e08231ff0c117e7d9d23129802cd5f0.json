{"remainingRequest":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\logs\\logs.tsx","dependencies":[{"path":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\logs\\logs.tsx","mtime":1549223105117},{"path":"H:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"H:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\r\nvar LogsPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LogsPage, _super);\r\n    function LogsPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            filter: ''\r\n        };\r\n        _this.getLogs = function () {\r\n            if (!_this.props.isFetching) {\r\n                _this.props.getLoggers();\r\n            }\r\n        };\r\n        _this.changeLevel = function (loggerName, level) { return function () {\r\n            _this.props.changeLogLevel(loggerName, level);\r\n        }; };\r\n        _this.setFilter = function (evt) {\r\n            _this.setState({\r\n                filter: evt.target.value\r\n            });\r\n        };\r\n        _this.getClassName = function (level, check, className) { return (level === check ? \"btn btn-sm btn-\" + className : 'btn btn-sm btn-light'); };\r\n        _this.filterFn = function (l) { return l.name.toUpperCase().includes(_this.state.filter.toUpperCase()); };\r\n        return _this;\r\n    }\r\n    LogsPage.prototype.componentDidMount = function () {\r\n        this.props.getLoggers();\r\n    };\r\n    LogsPage.prototype.render = function () {\r\n        var _this = this;\r\n        var _a = this.props, logs = _a.logs, isFetching = _a.isFetching;\r\n        var filter = this.state.filter;\r\n        var loggers = logs ? logs.loggers : [];\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { id: \"logs-page-heading\" }, \"Logs\"),\r\n            React.createElement(\"p\", null,\r\n                \"There are \",\r\n                loggers.length.toString(),\r\n                \" loggers.\"),\r\n            React.createElement(\"span\", null, \"Filter\"),\r\n            React.createElement(\"input\", { type: \"text\", value: filter, onChange: this.setFilter, className: \"form-control\", disabled: isFetching }),\r\n            React.createElement(\"table\", { className: \"table table-sm table-striped table-bordered\" },\r\n                React.createElement(\"thead\", null,\r\n                    React.createElement(\"tr\", { title: \"click to order\" },\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(\"span\", null, \"Name\")),\r\n                        React.createElement(\"th\", null,\r\n                            React.createElement(\"span\", null, \"Level\")))),\r\n                React.createElement(\"tbody\", null, loggers.filter(this.filterFn).map(function (logger, i) { return (React.createElement(\"tr\", { key: \"log-row-\" + i },\r\n                    React.createElement(\"td\", null,\r\n                        React.createElement(\"small\", null, logger.name)),\r\n                    React.createElement(\"td\", null,\r\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'TRACE'), className: _this.getClassName(logger.level, 'TRACE', 'primary') }, \"TRACE\"),\r\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'DEBUG'), className: _this.getClassName(logger.level, 'DEBUG', 'success') }, \"DEBUG\"),\r\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'INFO'), className: _this.getClassName(logger.level, 'INFO', 'info') }, \"INFO\"),\r\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'WARN'), className: _this.getClassName(logger.level, 'WARN', 'warning') }, \"WARN\"),\r\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'ERROR'), className: _this.getClassName(logger.level, 'ERROR', 'danger') }, \"ERROR\"),\r\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'OFF'), className: _this.getClassName(logger.level, 'OFF', 'secondary') }, \"OFF\")))); })))));\r\n    };\r\n    return LogsPage;\r\n}(React.Component));\r\nexport { LogsPage };\r\nvar mapStateToProps = function (_a) {\r\n    var administration = _a.administration;\r\n    return ({\r\n        logs: administration.logs,\r\n        isFetching: administration.loading\r\n    });\r\n};\r\nvar mapDispatchToProps = { getLoggers: getLoggers, changeLogLevel: changeLogLevel };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LogsPage);\r\n",{"version":3,"file":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\logs\\logs.tsx","sourceRoot":"","sources":["H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\logs\\logs.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface ILogsPageState {\r\n  filter: string;\r\n}\r\n\r\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\r\n  state: ILogsPageState = {\r\n    filter: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getLoggers();\r\n  }\r\n\r\n  getLogs = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.getLoggers();\r\n    }\r\n  };\r\n\r\n  changeLevel = (loggerName, level) => () => {\r\n    this.props.changeLogLevel(loggerName, level);\r\n  };\r\n\r\n  setFilter = evt => {\r\n    this.setState({\r\n      filter: evt.target.value\r\n    });\r\n  };\r\n\r\n  getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\r\n\r\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\r\n\r\n  render() {\r\n    const { logs, isFetching } = this.props;\r\n    const { filter } = this.state;\r\n    const loggers = logs ? logs.loggers : [];\r\n    return (\r\n      <div>\r\n        <h2 id=\"logs-page-heading\">Logs</h2>\r\n        <p>There are {loggers.length.toString()} loggers.</p>\r\n\r\n        <span>Filter</span>\r\n        <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\r\n\r\n        <table className=\"table table-sm table-striped table-bordered\">\r\n          <thead>\r\n            <tr title=\"click to order\">\r\n              <th>\r\n                <span>Name</span>\r\n              </th>\r\n              <th>\r\n                <span>Level</span>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {loggers.filter(this.filterFn).map((logger, i) => (\r\n              <tr key={`log-row-${i}`}>\r\n                <td>\r\n                  <small>{logger.name}</small>\r\n                </td>\r\n                <td>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'TRACE')}\r\n                    className={this.getClassName(logger.level, 'TRACE', 'primary')}\r\n                  >\r\n                    TRACE\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'DEBUG')}\r\n                    className={this.getClassName(logger.level, 'DEBUG', 'success')}\r\n                  >\r\n                    DEBUG\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'INFO')}\r\n                    className={this.getClassName(logger.level, 'INFO', 'info')}\r\n                  >\r\n                    INFO\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'WARN')}\r\n                    className={this.getClassName(logger.level, 'WARN', 'warning')}\r\n                  >\r\n                    WARN\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'ERROR')}\r\n                    className={this.getClassName(logger.level, 'ERROR', 'danger')}\r\n                  >\r\n                    ERROR\r\n                  </button>\r\n                  <button\r\n                    disabled={isFetching}\r\n                    onClick={this.changeLevel(logger.name, 'OFF')}\r\n                    className={this.getClassName(logger.level, 'OFF', 'secondary')}\r\n                  >\r\n                    OFF\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ administration }: IRootState) => ({\r\n  logs: administration.logs,\r\n  isFetching: administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LogsPage);\r\n"]}]}