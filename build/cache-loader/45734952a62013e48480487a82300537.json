{"remainingRequest":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx","dependencies":[{"path":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx","mtime":1549223105111},{"path":"G:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"G:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Button } from 'reactstrap';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { savePassword, reset } from './password.reducer';\r\nvar PasswordPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PasswordPage, _super);\r\n    function PasswordPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            password: ''\r\n        };\r\n        _this.handleValidSubmit = function (event, values) {\r\n            _this.props.savePassword(values.currentPassword, values.newPassword);\r\n        };\r\n        _this.updatePassword = function (event) {\r\n            _this.setState({ password: event.target.value });\r\n        };\r\n        return _this;\r\n    }\r\n    PasswordPage.prototype.componentDidMount = function () {\r\n        this.props.reset();\r\n        this.props.getSession();\r\n    };\r\n    PasswordPage.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    PasswordPage.prototype.render = function () {\r\n        var account = this.props.account;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"password-title\" },\r\n                        \"Password for \",\r\n                        account.login),\r\n                    React.createElement(AvForm, { id: \"password-form\", onValidSubmit: this.handleValidSubmit },\r\n                        React.createElement(AvField, { name: \"currentPassword\", label: \"Current password\", placeholder: \"Current password\", type: \"password\", validate: {\r\n                                required: { value: true, errorMessage: 'Your password is required.' }\r\n                            } }),\r\n                        React.createElement(AvField, { name: \"newPassword\", label: \"New password\", placeholder: \"New password\", type: \"password\", validate: {\r\n                                required: { value: true, errorMessage: 'Your password is required.' },\r\n                                minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\r\n                                maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\r\n                            }, onChange: this.updatePassword }),\r\n                        React.createElement(PasswordStrengthBar, { password: this.state.password }),\r\n                        React.createElement(AvField, { name: \"confirmPassword\", label: \"New password confirmation\", placeholder: \"Confirm the new password\", type: \"password\", validate: {\r\n                                required: {\r\n                                    value: true,\r\n                                    errorMessage: 'Your confirmation password is required.'\r\n                                },\r\n                                minLength: {\r\n                                    value: 4,\r\n                                    errorMessage: 'Your confirmation password is required to be at least 4 characters.'\r\n                                },\r\n                                maxLength: {\r\n                                    value: 50,\r\n                                    errorMessage: 'Your confirmation password cannot be longer than 50 characters.'\r\n                                },\r\n                                match: {\r\n                                    value: 'newPassword',\r\n                                    errorMessage: 'The password and its confirmation do not match!'\r\n                                }\r\n                            } }),\r\n                        React.createElement(Button, { color: \"success\", type: \"submit\" }, \"Save\"))))));\r\n    };\r\n    return PasswordPage;\r\n}(React.Component));\r\nexport { PasswordPage };\r\nvar mapStateToProps = function (_a) {\r\n    var authentication = _a.authentication;\r\n    return ({\r\n        account: authentication.account,\r\n        isAuthenticated: authentication.isAuthenticated\r\n    });\r\n};\r\nvar mapDispatchToProps = { getSession: getSession, savePassword: savePassword, reset: reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordPage);\r\n",{"version":3,"file":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx","sourceRoot":"","sources":["G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password\\password.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { Row, Col, Button } from 'reactstrap';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\r\nimport { savePassword, reset } from './password.reducer';\r\n\r\nexport interface IUserPasswordProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IUserPasswordState {\r\n  password: string;\r\n}\r\n\r\nexport class PasswordPage extends React.Component<IUserPasswordProps, IUserPasswordState> {\r\n  state: IUserPasswordState = {\r\n    password: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.reset();\r\n    this.props.getSession();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.reset();\r\n  }\r\n\r\n  handleValidSubmit = (event, values) => {\r\n    this.props.savePassword(values.currentPassword, values.newPassword);\r\n  };\r\n\r\n  updatePassword = event => {\r\n    this.setState({ password: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { account } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2 id=\"password-title\">Password for {account.login}</h2>\r\n            <AvForm id=\"password-form\" onValidSubmit={this.handleValidSubmit}>\r\n              <AvField\r\n                name=\"currentPassword\"\r\n                label=\"Current password\"\r\n                placeholder=\"Current password\"\r\n                type=\"password\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your password is required.' }\r\n                }}\r\n              />\r\n              <AvField\r\n                name=\"newPassword\"\r\n                label=\"New password\"\r\n                placeholder=\"New password\"\r\n                type=\"password\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your password is required.' },\r\n                  minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\r\n                  maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\r\n                }}\r\n                onChange={this.updatePassword}\r\n              />\r\n              <PasswordStrengthBar password={this.state.password} />\r\n              <AvField\r\n                name=\"confirmPassword\"\r\n                label=\"New password confirmation\"\r\n                placeholder=\"Confirm the new password\"\r\n                type=\"password\"\r\n                validate={{\r\n                  required: {\r\n                    value: true,\r\n                    errorMessage: 'Your confirmation password is required.'\r\n                  },\r\n                  minLength: {\r\n                    value: 4,\r\n                    errorMessage: 'Your confirmation password is required to be at least 4 characters.'\r\n                  },\r\n                  maxLength: {\r\n                    value: 50,\r\n                    errorMessage: 'Your confirmation password cannot be longer than 50 characters.'\r\n                  },\r\n                  match: {\r\n                    value: 'newPassword',\r\n                    errorMessage: 'The password and its confirmation do not match!'\r\n                  }\r\n                }}\r\n              />\r\n              <Button color=\"success\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </AvForm>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ authentication }: IRootState) => ({\r\n  account: authentication.account,\r\n  isAuthenticated: authentication.isAuthenticated\r\n});\r\n\r\nconst mapDispatchToProps = { getSession, savePassword, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PasswordPage);\r\n"]}]}