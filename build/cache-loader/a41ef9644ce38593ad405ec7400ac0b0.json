{"remainingRequest":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","dependencies":[{"path":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","mtime":1556391440911},{"path":"G:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"G:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { systemHealth } from '../administration.reducer';\r\nimport HealthModal from './health-modal';\r\nvar HealthPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(HealthPage, _super);\r\n    function HealthPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = {\r\n            healthObject: {},\r\n            showModal: false\r\n        };\r\n        _this.getSystemHealth = function () {\r\n            if (!_this.props.isFetching) {\r\n                _this.props.systemHealth();\r\n            }\r\n        };\r\n        _this.getSystemHealthInfo = function (name, healthObject) { return function () {\r\n            _this.setState({\r\n                showModal: true,\r\n                healthObject: tslib_1.__assign({}, healthObject, { name: name })\r\n            });\r\n        }; };\r\n        _this.handleClose = function () {\r\n            _this.setState({\r\n                showModal: false\r\n            });\r\n        };\r\n        _this.renderModal = function () {\r\n            var healthObject = _this.state.healthObject;\r\n            return React.createElement(HealthModal, { healthObject: healthObject, handleClose: _this.handleClose, showModal: _this.state.showModal });\r\n        };\r\n        return _this;\r\n    }\r\n    HealthPage.prototype.componentDidMount = function () {\r\n        this.props.systemHealth();\r\n    };\r\n    HealthPage.prototype.render = function () {\r\n        var _this = this;\r\n        var _a = this.props, health = _a.health, isFetching = _a.isFetching;\r\n        var data = (health || {}).details || {};\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"h2\", { id: \"health-page-heading\" }, \"Health Checks\"),\r\n            React.createElement(\"p\", null,\r\n                React.createElement(Button, { onClick: this.getSystemHealth, color: isFetching ? 'btn btn-danger' : 'btn btn-primary', disabled: isFetching },\r\n                    React.createElement(FontAwesomeIcon, { icon: \"sync\" }),\r\n                    \"\\u00A0 Refresh\")),\r\n            React.createElement(Row, null,\r\n                React.createElement(Col, { md: \"12\" },\r\n                    React.createElement(Table, { bordered: true },\r\n                        React.createElement(\"thead\", null,\r\n                            React.createElement(\"tr\", null,\r\n                                React.createElement(\"th\", null, \"Service Name\"),\r\n                                React.createElement(\"th\", null, \"Status\"),\r\n                                React.createElement(\"th\", null, \"Details\"))),\r\n                        React.createElement(\"tbody\", null, Object.keys(data).map(function (configPropKey, configPropIndex) {\r\n                            return configPropKey !== 'status' ? (React.createElement(\"tr\", { key: configPropIndex },\r\n                                React.createElement(\"td\", null, configPropKey),\r\n                                React.createElement(\"td\", null,\r\n                                    React.createElement(Badge, { color: data[configPropKey].status !== 'UP' ? 'danger' : 'success' }, data[configPropKey].status)),\r\n                                React.createElement(\"td\", null, data[configPropKey].details ? (React.createElement(\"a\", { onClick: _this.getSystemHealthInfo(configPropKey, data[configPropKey]) },\r\n                                    React.createElement(FontAwesomeIcon, { icon: \"eye\" }))) : null))) : null;\r\n                        }))))),\r\n            this.renderModal()));\r\n    };\r\n    return HealthPage;\r\n}(React.Component));\r\nexport { HealthPage };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    health: storeState.administration.health,\r\n    isFetching: storeState.administration.loading\r\n}); };\r\nvar mapDispatchToProps = { systemHealth: systemHealth };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\r\n",{"version":3,"file":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx","sourceRoot":"","sources":["G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\administration\\health\\health.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Table, Badge, Col, Row, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { systemHealth } from '../administration.reducer';\r\nimport HealthModal from './health-modal';\r\n\r\nexport interface IHealthPageProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IHealthPageState {\r\n  healthObject: any;\r\n  showModal: boolean;\r\n}\r\n\r\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\r\n  state: IHealthPageState = {\r\n    healthObject: {},\r\n    showModal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.systemHealth();\r\n  }\r\n\r\n  getSystemHealth = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.systemHealth();\r\n    }\r\n  };\r\n\r\n  getSystemHealthInfo = (name, healthObject) => () => {\r\n    this.setState({\r\n      showModal: true,\r\n      healthObject: {\r\n        ...healthObject,\r\n        name\r\n      }\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      showModal: false\r\n    });\r\n  };\r\n\r\n  renderModal = () => {\r\n    const { healthObject } = this.state;\r\n    return <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />;\r\n  };\r\n\r\n  render() {\r\n    const { health, isFetching } = this.props;\r\n    const data = (health || {}).details || {};\r\n    return (\r\n      <div>\r\n        <h2 id=\"health-page-heading\">Health Checks</h2>\r\n        <p>\r\n          <Button onClick={this.getSystemHealth} color={isFetching ? 'btn btn-danger' : 'btn btn-primary'} disabled={isFetching}>\r\n            <FontAwesomeIcon icon=\"sync\" />&nbsp; Refresh\r\n          </Button>\r\n        </p>\r\n        <Row>\r\n          <Col md=\"12\">\r\n            <Table bordered>\r\n              <thead>\r\n                <tr>\r\n                  <th>Service Name</th>\r\n                  <th>Status</th>\r\n                  <th>Details</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(data).map(\r\n                  (configPropKey, configPropIndex) =>\r\n                    configPropKey !== 'status' ? (\r\n                      <tr key={configPropIndex}>\r\n                        <td>{configPropKey}</td>\r\n                        <td>\r\n                          <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\r\n                        </td>\r\n                        <td>\r\n                          {data[configPropKey].details ? (\r\n                            <a onClick={this.getSystemHealthInfo(configPropKey, data[configPropKey])}>\r\n                              <FontAwesomeIcon icon=\"eye\" />\r\n                            </a>\r\n                          ) : null}\r\n                        </td>\r\n                      </tr>\r\n                    ) : null\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n        {this.renderModal()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  health: storeState.administration.health,\r\n  isFetching: storeState.administration.loading\r\n});\r\n\r\nconst mapDispatchToProps = { systemHealth };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(HealthPage);\r\n"]}]}