{"remainingRequest":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\config\\notification-middleware.ts","dependencies":[{"path":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\config\\notification-middleware.ts","mtime":1549223105088},{"path":"H:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"H:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"H:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"H:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import { isPromise } from 'react-jhipster';\r\nimport { toast } from 'react-toastify';\r\nvar addErrorAlert = function (message, key, data) {\r\n    toast.error(message);\r\n};\r\nexport default (function () { return function (next) { return function (action) {\r\n    // If not a promise, continue on\r\n    if (!isPromise(action.payload)) {\r\n        return next(action);\r\n    }\r\n    /**\r\n     *\r\n     * The notification middleware serves to dispatch the initial pending promise to\r\n     * the promise middleware, but adds a `then` and `catch.\r\n     */\r\n    return next(action)\r\n        .then(function (response) {\r\n        if (action.meta && action.meta.successMessage) {\r\n            toast.success(action.meta.successMessage);\r\n        }\r\n        else if (response && response.action && response.action.payload && response.action.payload.headers) {\r\n            var headers = response.action.payload.headers;\r\n            var alert_1 = null;\r\n            Object.entries(headers).forEach(function (_a) {\r\n                var k = _a[0], v = _a[1];\r\n                if (k.toLowerCase().endsWith('app-alert')) {\r\n                    alert_1 = v;\r\n                }\r\n            });\r\n            if (alert_1) {\r\n                toast.success(alert_1);\r\n            }\r\n        }\r\n        return Promise.resolve(response);\r\n    })\r\n        .catch(function (error) {\r\n        if (action.meta && action.meta.errorMessage) {\r\n            toast.error(action.meta.errorMessage);\r\n        }\r\n        else if (error && error.response) {\r\n            var response = error.response;\r\n            var data = response.data;\r\n            if (!(response.status === 401 && (error.message === '' || (data && data.path && data.path.includes('/api/account'))))) {\r\n                var i = void 0;\r\n                switch (response.status) {\r\n                    // connection refused, server not reachable\r\n                    case 0:\r\n                        addErrorAlert('Server not reachable', 'error.server.not.reachable');\r\n                        break;\r\n                    case 400:\r\n                        var headers = Object.entries(response.headers);\r\n                        var errorHeader_1 = null;\r\n                        var entityKey_1 = null;\r\n                        headers.forEach(function (_a) {\r\n                            var k = _a[0], v = _a[1];\r\n                            if (k.toLowerCase().endsWith('app-error')) {\r\n                                errorHeader_1 = v;\r\n                            }\r\n                            else if (k.toLowerCase().endsWith('app-params')) {\r\n                                entityKey_1 = v;\r\n                            }\r\n                        });\r\n                        if (errorHeader_1) {\r\n                            var entityName = entityKey_1;\r\n                            addErrorAlert(errorHeader_1, errorHeader_1, { entityName: entityName });\r\n                        }\r\n                        else if (data !== '' && data.fieldErrors) {\r\n                            var fieldErrors = data.fieldErrors;\r\n                            for (i = 0; i < fieldErrors.length; i++) {\r\n                                var fieldError = fieldErrors[i];\r\n                                if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\r\n                                    fieldError.message = 'Size';\r\n                                }\r\n                                // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                                var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                                var fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\r\n                                addErrorAlert(\"Error on field \\\"\" + fieldName + \"\\\"\", \"error.\" + fieldError.message, { fieldName: fieldName });\r\n                            }\r\n                        }\r\n                        else if (data !== '' && data.message) {\r\n                            addErrorAlert(data.message, data.message, data.params);\r\n                        }\r\n                        else {\r\n                            addErrorAlert(data);\r\n                        }\r\n                        break;\r\n                    case 404:\r\n                        addErrorAlert('Not found', 'error.url.not.found');\r\n                        break;\r\n                    default:\r\n                        if (data !== '' && data.message) {\r\n                            addErrorAlert(data.message);\r\n                        }\r\n                        else {\r\n                            addErrorAlert(data);\r\n                        }\r\n                }\r\n            }\r\n        }\r\n        else if (error && error.message) {\r\n            toast.error(error.message);\r\n        }\r\n        else {\r\n            toast.error('Unknown error!');\r\n        }\r\n        return Promise.reject(error);\r\n    });\r\n}; }; });\r\n",{"version":3,"file":"H:\\projects\\limsy-application\\src\\main\\webapp\\app\\config\\notification-middleware.ts","sourceRoot":"","sources":["H:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!H:\\projects\\limsy-application\\src\\main\\webapp\\app\\config\\notification-middleware.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC,IAAM,aAAa,GAAG,UAAC,OAAO,EAAE,GAAI,EAAE,IAAK;IACzC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC,CAAC;AACF,gBAAe,cAAM,OAAA,UAAA,IAAI,IAAI,OAAA,UAAA,MAAM;IACjC,gCAAgC;IAChC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;KACrB;IAED;;;;OAIG;IACH,OAAO,IAAI,CAAC,MAAM,CAAC;SAChB,IAAI,CAAC,UAAA,QAAQ;QACZ,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE;YAC7C,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAC3C;aAAM,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE;YACpG,IAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;YAChD,IAAI,OAAK,GAAW,IAAI,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,EAAwB;oBAAvB,SAAC,EAAE,SAAC;gBACpC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;oBACzC,OAAK,GAAG,CAAC,CAAC;iBACX;YACH,CAAC,CAAC,CAAC;YACH,IAAI,OAAK,EAAE;gBACT,KAAK,CAAC,OAAO,CAAC,OAAK,CAAC,CAAC;aACtB;SACF;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC,CAAC;SACD,KAAK,CAAC,UAAA,KAAK;QACV,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE;YAC3C,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACvC;aAAM,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE;YAClC,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;YAChC,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC3B,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE;gBACrH,IAAI,CAAC,SAAA,CAAC;gBACN,QAAQ,QAAQ,CAAC,MAAM,EAAE;oBACvB,2CAA2C;oBAC3C,KAAK,CAAC;wBACJ,aAAa,CAAC,sBAAsB,EAAE,4BAA4B,CAAC,CAAC;wBACpE,MAAM;oBAER,KAAK,GAAG;wBACN,IAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;wBACjD,IAAI,aAAW,GAAG,IAAI,CAAC;wBACvB,IAAI,WAAS,GAAG,IAAI,CAAC;wBACrB,OAAO,CAAC,OAAO,CAAC,UAAC,EAAwB;gCAAvB,SAAC,EAAE,SAAC;4BACpB,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;gCACzC,aAAW,GAAG,CAAC,CAAC;6BACjB;iCAAM,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;gCACjD,WAAS,GAAG,CAAC,CAAC;6BACf;wBACH,CAAC,CAAC,CAAC;wBACH,IAAI,aAAW,EAAE;4BACf,IAAM,UAAU,GAAG,WAAS,CAAC;4BAC7B,aAAa,CAAC,aAAW,EAAE,aAAW,EAAE,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;yBACzD;6BAAM,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,WAAW,EAAE;4BAC1C,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;4BACrC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gCACvC,IAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;gCAClC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;oCAC3E,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC;iCAC7B;gCACD,uGAAuG;gCACvG,IAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gCAClE,IAAM,SAAS,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCACnF,aAAa,CAAC,sBAAmB,SAAS,OAAG,EAAE,WAAS,UAAU,CAAC,OAAS,EAAE,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;6BAC9F;yBACF;6BAAM,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE;4BACtC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;yBACxD;6BAAM;4BACL,aAAa,CAAC,IAAI,CAAC,CAAC;yBACrB;wBACD,MAAM;oBAER,KAAK,GAAG;wBACN,aAAa,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;wBAClD,MAAM;oBAER;wBACE,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE;4BAC/B,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;yBAC7B;6BAAM;4BACL,aAAa,CAAC,IAAI,CAAC,CAAC;yBACrB;iBACJ;aACF;SACF;aAAM,IAAI,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE;YACjC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC5B;aAAM;YACL,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;SAC/B;QACD,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;AACP,CAAC,EA/F4B,CA+F5B,EA/FoB,CA+FpB,EAAC","sourcesContent":["import { isPromise } from 'react-jhipster';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst addErrorAlert = (message, key?, data?) => {\r\n  toast.error(message);\r\n};\r\nexport default () => next => action => {\r\n  // If not a promise, continue on\r\n  if (!isPromise(action.payload)) {\r\n    return next(action);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * The notification middleware serves to dispatch the initial pending promise to\r\n   * the promise middleware, but adds a `then` and `catch.\r\n   */\r\n  return next(action)\r\n    .then(response => {\r\n      if (action.meta && action.meta.successMessage) {\r\n        toast.success(action.meta.successMessage);\r\n      } else if (response && response.action && response.action.payload && response.action.payload.headers) {\r\n        const headers = response.action.payload.headers;\r\n        let alert: string = null;\r\n        Object.entries(headers).forEach(([k, v]: [string, string]) => {\r\n          if (k.toLowerCase().endsWith('app-alert')) {\r\n            alert = v;\r\n          }\r\n        });\r\n        if (alert) {\r\n          toast.success(alert);\r\n        }\r\n      }\r\n      return Promise.resolve(response);\r\n    })\r\n    .catch(error => {\r\n      if (action.meta && action.meta.errorMessage) {\r\n        toast.error(action.meta.errorMessage);\r\n      } else if (error && error.response) {\r\n        const response = error.response;\r\n        const data = response.data;\r\n        if (!(response.status === 401 && (error.message === '' || (data && data.path && data.path.includes('/api/account'))))) {\r\n          let i;\r\n          switch (response.status) {\r\n            // connection refused, server not reachable\r\n            case 0:\r\n              addErrorAlert('Server not reachable', 'error.server.not.reachable');\r\n              break;\r\n\r\n            case 400:\r\n              const headers = Object.entries(response.headers);\r\n              let errorHeader = null;\r\n              let entityKey = null;\r\n              headers.forEach(([k, v]: [string, string]) => {\r\n                if (k.toLowerCase().endsWith('app-error')) {\r\n                  errorHeader = v;\r\n                } else if (k.toLowerCase().endsWith('app-params')) {\r\n                  entityKey = v;\r\n                }\r\n              });\r\n              if (errorHeader) {\r\n                const entityName = entityKey;\r\n                addErrorAlert(errorHeader, errorHeader, { entityName });\r\n              } else if (data !== '' && data.fieldErrors) {\r\n                const fieldErrors = data.fieldErrors;\r\n                for (i = 0; i < fieldErrors.length; i++) {\r\n                  const fieldError = fieldErrors[i];\r\n                  if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\r\n                    fieldError.message = 'Size';\r\n                  }\r\n                  // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\r\n                  const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\r\n                  const fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\r\n                  addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message}`, { fieldName });\r\n                }\r\n              } else if (data !== '' && data.message) {\r\n                addErrorAlert(data.message, data.message, data.params);\r\n              } else {\r\n                addErrorAlert(data);\r\n              }\r\n              break;\r\n\r\n            case 404:\r\n              addErrorAlert('Not found', 'error.url.not.found');\r\n              break;\r\n\r\n            default:\r\n              if (data !== '' && data.message) {\r\n                addErrorAlert(data.message);\r\n              } else {\r\n                addErrorAlert(data);\r\n              }\r\n          }\r\n        }\r\n      } else if (error && error.message) {\r\n        toast.error(error.message);\r\n      } else {\r\n        toast.error('Unknown error!');\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n};\r\n"]}]}