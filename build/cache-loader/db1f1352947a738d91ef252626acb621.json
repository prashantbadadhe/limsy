{"remainingRequest":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\selected-suggestion\\selected-suggestion-update.tsx","dependencies":[{"path":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\selected-suggestion\\selected-suggestion-update.tsx","mtime":1556391440907},{"path":"G:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"G:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getSuggestions } from 'app/entities/suggestion/suggestion.reducer';\r\nimport { getEntities as getDresses } from 'app/entities/dress/dress.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './selected-suggestion.reducer';\r\nvar SelectedSuggestionUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SelectedSuggestionUpdate, _super);\r\n    function SelectedSuggestionUpdate(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.saveEntity = function (event, errors, values) {\r\n            if (errors.length === 0) {\r\n                var selectedSuggestionEntity = _this.props.selectedSuggestionEntity;\r\n                var entity = tslib_1.__assign({}, selectedSuggestionEntity, values);\r\n                if (_this.state.isNew) {\r\n                    _this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    _this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/entity/selected-suggestion');\r\n        };\r\n        _this.state = {\r\n            suggestionId: '0',\r\n            dressId: '0',\r\n            isNew: !_this.props.match.params || !_this.props.match.params.id\r\n        };\r\n        return _this;\r\n    }\r\n    SelectedSuggestionUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    };\r\n    SelectedSuggestionUpdate.prototype.componentDidMount = function () {\r\n        if (this.state.isNew) {\r\n            this.props.reset();\r\n        }\r\n        else {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getSuggestions();\r\n        this.props.getDresses();\r\n    };\r\n    SelectedSuggestionUpdate.prototype.render = function () {\r\n        var _a = this.props, selectedSuggestionEntity = _a.selectedSuggestionEntity, suggestions = _a.suggestions, dresses = _a.dresses, loading = _a.loading, updating = _a.updating;\r\n        var isNew = this.state.isNew;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"limsyApp.selectedSuggestion.home.createOrEditLabel\" }, \"Create or edit a SelectedSuggestion\"))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : selectedSuggestionEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" }, \"ID\"),\r\n                        React.createElement(AvInput, { id: \"selected-suggestion-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"selectedLabel\", check: true },\r\n                            React.createElement(AvInput, { id: \"selected-suggestion-selected\", type: \"checkbox\", className: \"form-control\", name: \"selected\" }),\r\n                            \"Selected\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"manualSelectLabel\", check: true },\r\n                            React.createElement(AvInput, { id: \"selected-suggestion-manualSelect\", type: \"checkbox\", className: \"form-control\", name: \"manualSelect\" }),\r\n                            \"Manual Select\")),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"suggestion.id\" }, \"Suggestion\"),\r\n                        React.createElement(AvInput, { id: \"selected-suggestion-suggestion\", type: \"select\", className: \"form-control\", name: \"suggestion.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            suggestions\r\n                                ? suggestions.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)); })\r\n                                : null)),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"dress.id\" }, \"Dress\"),\r\n                        React.createElement(AvInput, { id: \"selected-suggestion-dress\", type: \"select\", className: \"form-control\", name: \"dress.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            dresses\r\n                                ? dresses.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.id)); })\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/selected-suggestion\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Back\")),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0 Save\")))))));\r\n    };\r\n    return SelectedSuggestionUpdate;\r\n}(React.Component));\r\nexport { SelectedSuggestionUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    suggestions: storeState.suggestion.entities,\r\n    dresses: storeState.dress.entities,\r\n    selectedSuggestionEntity: storeState.selectedSuggestion.entity,\r\n    loading: storeState.selectedSuggestion.loading,\r\n    updating: storeState.selectedSuggestion.updating,\r\n    updateSuccess: storeState.selectedSuggestion.updateSuccess\r\n}); };\r\nvar mapDispatchToProps = {\r\n    getSuggestions: getSuggestions,\r\n    getDresses: getDresses,\r\n    getEntity: getEntity,\r\n    updateEntity: updateEntity,\r\n    createEntity: createEntity,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectedSuggestionUpdate);\r\n",{"version":3,"file":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\selected-suggestion\\selected-suggestion-update.tsx","sourceRoot":"","sources":["G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\selected-suggestion\\selected-suggestion-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput } from 'availity-reactstrap-validation';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nimport { ISuggestion } from 'app/shared/model/suggestion.model';\r\nimport { getEntities as getSuggestions } from 'app/entities/suggestion/suggestion.reducer';\r\nimport { IDress } from 'app/shared/model/dress.model';\r\nimport { getEntities as getDresses } from 'app/entities/dress/dress.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './selected-suggestion.reducer';\r\nimport { ISelectedSuggestion } from 'app/shared/model/selected-suggestion.model';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\r\nimport { mapIdList } from 'app/shared/util/entity-utils';\r\n\r\nexport interface ISelectedSuggestionUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface ISelectedSuggestionUpdateState {\r\n  isNew: boolean;\r\n  suggestionId: string;\r\n  dressId: string;\r\n}\r\n\r\nexport class SelectedSuggestionUpdate extends React.Component<ISelectedSuggestionUpdateProps, ISelectedSuggestionUpdateState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      suggestionId: '0',\r\n      dressId: '0',\r\n      isNew: !this.props.match.params || !this.props.match.params.id\r\n    };\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n      this.handleClose();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.isNew) {\r\n      this.props.reset();\r\n    } else {\r\n      this.props.getEntity(this.props.match.params.id);\r\n    }\r\n\r\n    this.props.getSuggestions();\r\n    this.props.getDresses();\r\n  }\r\n\r\n  saveEntity = (event, errors, values) => {\r\n    if (errors.length === 0) {\r\n      const { selectedSuggestionEntity } = this.props;\r\n      const entity = {\r\n        ...selectedSuggestionEntity,\r\n        ...values\r\n      };\r\n\r\n      if (this.state.isNew) {\r\n        this.props.createEntity(entity);\r\n      } else {\r\n        this.props.updateEntity(entity);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.history.push('/entity/selected-suggestion');\r\n  };\r\n\r\n  render() {\r\n    const { selectedSuggestionEntity, suggestions, dresses, loading, updating } = this.props;\r\n    const { isNew } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2 id=\"limsyApp.selectedSuggestion.home.createOrEditLabel\">Create or edit a SelectedSuggestion</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            {loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <AvForm model={isNew ? {} : selectedSuggestionEntity} onSubmit={this.saveEntity}>\r\n                {!isNew ? (\r\n                  <AvGroup>\r\n                    <Label for=\"id\">ID</Label>\r\n                    <AvInput id=\"selected-suggestion-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\r\n                  </AvGroup>\r\n                ) : null}\r\n                <AvGroup>\r\n                  <Label id=\"selectedLabel\" check>\r\n                    <AvInput id=\"selected-suggestion-selected\" type=\"checkbox\" className=\"form-control\" name=\"selected\" />\r\n                    Selected\r\n                  </Label>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"manualSelectLabel\" check>\r\n                    <AvInput id=\"selected-suggestion-manualSelect\" type=\"checkbox\" className=\"form-control\" name=\"manualSelect\" />\r\n                    Manual Select\r\n                  </Label>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"suggestion.id\">Suggestion</Label>\r\n                  <AvInput id=\"selected-suggestion-suggestion\" type=\"select\" className=\"form-control\" name=\"suggestion.id\">\r\n                    <option value=\"\" key=\"0\" />\r\n                    {suggestions\r\n                      ? suggestions.map(otherEntity => (\r\n                          <option value={otherEntity.id} key={otherEntity.id}>\r\n                            {otherEntity.id}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"dress.id\">Dress</Label>\r\n                  <AvInput id=\"selected-suggestion-dress\" type=\"select\" className=\"form-control\" name=\"dress.id\">\r\n                    <option value=\"\" key=\"0\" />\r\n                    {dresses\r\n                      ? dresses.map(otherEntity => (\r\n                          <option value={otherEntity.id} key={otherEntity.id}>\r\n                            {otherEntity.id}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/selected-suggestion\" replace color=\"info\">\r\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\r\n                  <span className=\"d-none d-md-inline\">Back</span>\r\n                </Button>\r\n                &nbsp;\r\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\r\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\r\n                </Button>\r\n              </AvForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  suggestions: storeState.suggestion.entities,\r\n  dresses: storeState.dress.entities,\r\n  selectedSuggestionEntity: storeState.selectedSuggestion.entity,\r\n  loading: storeState.selectedSuggestion.loading,\r\n  updating: storeState.selectedSuggestion.updating,\r\n  updateSuccess: storeState.selectedSuggestion.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getSuggestions,\r\n  getDresses,\r\n  getEntity,\r\n  updateEntity,\r\n  createEntity,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectedSuggestionUpdate);\r\n"]}]}