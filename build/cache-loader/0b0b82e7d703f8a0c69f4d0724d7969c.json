{"remainingRequest":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\user-additional\\user-additional-update.tsx","dependencies":[{"path":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\user-additional\\user-additional-update.tsx","mtime":1556391440910},{"path":"G:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"G:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { getEntities as getLocations } from 'app/entities/location/location.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './user-additional.reducer';\r\nvar UserAdditionalUpdate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(UserAdditionalUpdate, _super);\r\n    function UserAdditionalUpdate(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.saveEntity = function (event, errors, values) {\r\n            if (errors.length === 0) {\r\n                var userAdditionalEntity = _this.props.userAdditionalEntity;\r\n                var entity = tslib_1.__assign({}, userAdditionalEntity, values);\r\n                if (_this.state.isNew) {\r\n                    _this.props.createEntity(entity);\r\n                }\r\n                else {\r\n                    _this.props.updateEntity(entity);\r\n                }\r\n            }\r\n        };\r\n        _this.handleClose = function () {\r\n            _this.props.history.push('/entity/user-additional');\r\n        };\r\n        _this.state = {\r\n            addressId: '0',\r\n            isNew: !_this.props.match.params || !_this.props.match.params.id\r\n        };\r\n        return _this;\r\n    }\r\n    UserAdditionalUpdate.prototype.componentWillUpdate = function (nextProps, nextState) {\r\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n            this.handleClose();\r\n        }\r\n    };\r\n    UserAdditionalUpdate.prototype.componentDidMount = function () {\r\n        if (!this.state.isNew) {\r\n            this.props.getEntity(this.props.match.params.id);\r\n        }\r\n        this.props.getLocations();\r\n    };\r\n    UserAdditionalUpdate.prototype.render = function () {\r\n        var _a = this.props, userAdditionalEntity = _a.userAdditionalEntity, locations = _a.locations, loading = _a.loading, updating = _a.updating;\r\n        var isNew = this.state.isNew;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"limsyApp.userAdditional.home.createOrEditLabel\" }, \"Create or edit a UserAdditional\"))),\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : userAdditionalEntity, onSubmit: this.saveEntity },\r\n                    !isNew ? (React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"id\" }, \"ID\"),\r\n                        React.createElement(AvInput, { id: \"user-additional-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"genderLabel\", for: \"gender\" }, \"Gender\"),\r\n                        React.createElement(AvField, { id: \"user-additional-gender\", type: \"text\", name: \"gender\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"birthDateLabel\", for: \"birthDate\" }, \"Birth Date\"),\r\n                        React.createElement(AvField, { id: \"user-additional-birthDate\", type: \"date\", className: \"form-control\", name: \"birthDate\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"phoneLabel\", for: \"phone\" }, \"Phone\"),\r\n                        React.createElement(AvField, { id: \"user-additional-phone\", type: \"text\", name: \"phone\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { id: \"emailLabel\", for: \"email\" }, \"Email\"),\r\n                        React.createElement(AvField, { id: \"user-additional-email\", type: \"text\", name: \"email\" })),\r\n                    React.createElement(AvGroup, null,\r\n                        React.createElement(Label, { for: \"address.area\" }, \"Address\"),\r\n                        React.createElement(AvInput, { id: \"user-additional-address\", type: \"select\", className: \"form-control\", name: \"address.id\" },\r\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\r\n                            locations\r\n                                ? locations.map(function (otherEntity) { return (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.area)); })\r\n                                : null)),\r\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/user-additional\", replace: true, color: \"info\" },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\r\n                        \"\\u00A0\",\r\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" }, \"Back\")),\r\n                    \"\\u00A0\",\r\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\r\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\r\n                        \"\\u00A0 Save\")))))));\r\n    };\r\n    return UserAdditionalUpdate;\r\n}(React.Component));\r\nexport { UserAdditionalUpdate };\r\nvar mapStateToProps = function (storeState) { return ({\r\n    locations: storeState.location.entities,\r\n    userAdditionalEntity: storeState.userAdditional.entity,\r\n    loading: storeState.userAdditional.loading,\r\n    updating: storeState.userAdditional.updating,\r\n    updateSuccess: storeState.userAdditional.updateSuccess\r\n}); };\r\nvar mapDispatchToProps = {\r\n    getLocations: getLocations,\r\n    getEntity: getEntity,\r\n    updateEntity: updateEntity,\r\n    createEntity: createEntity,\r\n    reset: reset\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAdditionalUpdate);\r\n",{"version":3,"file":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\user-additional\\user-additional-update.tsx","sourceRoot":"","sources":["G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\entities\\user-additional\\user-additional-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { Button, Row, Col, Label } from 'reactstrap';\r\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IRootState } from 'app/shared/reducers';\r\n\r\nimport { ILocation } from 'app/shared/model/location.model';\r\nimport { getEntities as getLocations } from 'app/entities/location/location.reducer';\r\nimport { getEntity, updateEntity, createEntity, reset } from './user-additional.reducer';\r\nimport { IUserAdditional } from 'app/shared/model/user-additional.model';\r\n// tslint:disable-next-line:no-unused-variable\r\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\r\nimport { mapIdList } from 'app/shared/util/entity-utils';\r\n\r\nexport interface IUserAdditionalUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\r\n\r\nexport interface IUserAdditionalUpdateState {\r\n  isNew: boolean;\r\n  addressId: string;\r\n}\r\n\r\nexport class UserAdditionalUpdate extends React.Component<IUserAdditionalUpdateProps, IUserAdditionalUpdateState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      addressId: '0',\r\n      isNew: !this.props.match.params || !this.props.match.params.id\r\n    };\r\n  }\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\r\n      this.handleClose();\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.state.isNew) {\r\n      this.props.getEntity(this.props.match.params.id);\r\n    }\r\n\r\n    this.props.getLocations();\r\n  }\r\n\r\n  saveEntity = (event, errors, values) => {\r\n    if (errors.length === 0) {\r\n      const { userAdditionalEntity } = this.props;\r\n      const entity = {\r\n        ...userAdditionalEntity,\r\n        ...values\r\n      };\r\n\r\n      if (this.state.isNew) {\r\n        this.props.createEntity(entity);\r\n      } else {\r\n        this.props.updateEntity(entity);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.props.history.push('/entity/user-additional');\r\n  };\r\n\r\n  render() {\r\n    const { userAdditionalEntity, locations, loading, updating } = this.props;\r\n    const { isNew } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2 id=\"limsyApp.userAdditional.home.createOrEditLabel\">Create or edit a UserAdditional</h2>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            {loading ? (\r\n              <p>Loading...</p>\r\n            ) : (\r\n              <AvForm model={isNew ? {} : userAdditionalEntity} onSubmit={this.saveEntity}>\r\n                {!isNew ? (\r\n                  <AvGroup>\r\n                    <Label for=\"id\">ID</Label>\r\n                    <AvInput id=\"user-additional-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\r\n                  </AvGroup>\r\n                ) : null}\r\n                <AvGroup>\r\n                  <Label id=\"genderLabel\" for=\"gender\">\r\n                    Gender\r\n                  </Label>\r\n                  <AvField id=\"user-additional-gender\" type=\"text\" name=\"gender\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"birthDateLabel\" for=\"birthDate\">\r\n                    Birth Date\r\n                  </Label>\r\n                  <AvField id=\"user-additional-birthDate\" type=\"date\" className=\"form-control\" name=\"birthDate\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"phoneLabel\" for=\"phone\">\r\n                    Phone\r\n                  </Label>\r\n                  <AvField id=\"user-additional-phone\" type=\"text\" name=\"phone\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label id=\"emailLabel\" for=\"email\">\r\n                    Email\r\n                  </Label>\r\n                  <AvField id=\"user-additional-email\" type=\"text\" name=\"email\" />\r\n                </AvGroup>\r\n                <AvGroup>\r\n                  <Label for=\"address.area\">Address</Label>\r\n                  <AvInput id=\"user-additional-address\" type=\"select\" className=\"form-control\" name=\"address.id\">\r\n                    <option value=\"\" key=\"0\" />\r\n                    {locations\r\n                      ? locations.map(otherEntity => (\r\n                          <option value={otherEntity.id} key={otherEntity.id}>\r\n                            {otherEntity.area}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </AvInput>\r\n                </AvGroup>\r\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/user-additional\" replace color=\"info\">\r\n                  <FontAwesomeIcon icon=\"arrow-left\" />&nbsp;\r\n                  <span className=\"d-none d-md-inline\">Back</span>\r\n                </Button>\r\n                &nbsp;\r\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\r\n                  <FontAwesomeIcon icon=\"save\" />&nbsp; Save\r\n                </Button>\r\n              </AvForm>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (storeState: IRootState) => ({\r\n  locations: storeState.location.entities,\r\n  userAdditionalEntity: storeState.userAdditional.entity,\r\n  loading: storeState.userAdditional.loading,\r\n  updating: storeState.userAdditional.updating,\r\n  updateSuccess: storeState.userAdditional.updateSuccess\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getLocations,\r\n  getEntity,\r\n  updateEntity,\r\n  createEntity,\r\n  reset\r\n};\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserAdditionalUpdate);\r\n"]}]}