{"remainingRequest":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx","dependencies":[{"path":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx","mtime":1549223105113},{"path":"G:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"G:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport React from 'react';\r\nimport { Button, Col, Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport { saveAccountSettings, reset } from './settings.reducer';\r\nvar SettingsPage = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SettingsPage, _super);\r\n    function SettingsPage() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.handleValidSubmit = function (event, values) {\r\n            var account = tslib_1.__assign({}, _this.props.account, values);\r\n            _this.props.saveAccountSettings(account);\r\n            event.persist();\r\n        };\r\n        return _this;\r\n    }\r\n    SettingsPage.prototype.componentDidMount = function () {\r\n        this.props.getSession();\r\n    };\r\n    SettingsPage.prototype.componentWillUnmount = function () {\r\n        this.props.reset();\r\n    };\r\n    SettingsPage.prototype.render = function () {\r\n        var account = this.props.account;\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(Row, { className: \"justify-content-center\" },\r\n                React.createElement(Col, { md: \"8\" },\r\n                    React.createElement(\"h2\", { id: \"settings-title\" },\r\n                        \"User settings for \",\r\n                        account.login),\r\n                    React.createElement(AvForm, { id: \"settings-form\", onValidSubmit: this.handleValidSubmit },\r\n                        React.createElement(AvField, { className: \"form-control\", name: \"firstName\", label: \"First Name\", id: \"firstName\", placeholder: \"Your first name\", validate: {\r\n                                required: { value: true, errorMessage: 'Your first name is required.' },\r\n                                minLength: { value: 1, errorMessage: 'Your first name is required to be at least 1 character' },\r\n                                maxLength: { value: 50, errorMessage: 'Your first name cannot be longer than 50 characters' }\r\n                            }, value: account.firstName }),\r\n                        React.createElement(AvField, { className: \"form-control\", name: \"lastName\", label: \"Last Name\", id: \"lastName\", placeholder: \"Your last name\", validate: {\r\n                                required: { value: true, errorMessage: 'Your last name is required.' },\r\n                                minLength: { value: 1, errorMessage: 'Your last name is required to be at least 1 character' },\r\n                                maxLength: { value: 50, errorMessage: 'Your last name cannot be longer than 50 characters' }\r\n                            }, value: account.lastName }),\r\n                        React.createElement(AvField, { name: \"email\", label: \"Email\", placeholder: \"Your email\", type: \"email\", validate: {\r\n                                required: { value: true, errorMessage: 'Your email is required.' },\r\n                                minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\r\n                                maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\r\n                            }, value: account.email }),\r\n                        React.createElement(Button, { color: \"primary\", type: \"submit\" }, \"Save\"))))));\r\n    };\r\n    return SettingsPage;\r\n}(React.Component));\r\nexport { SettingsPage };\r\nvar mapStateToProps = function (_a) {\r\n    var authentication = _a.authentication;\r\n    return ({\r\n        account: authentication.account,\r\n        isAuthenticated: authentication.isAuthenticated\r\n    });\r\n};\r\nvar mapDispatchToProps = { getSession: getSession, saveAccountSettings: saveAccountSettings, reset: reset };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\r\n",{"version":3,"file":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx","sourceRoot":"","sources":["G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Button, Col, Alert, Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\n\r\nimport { IRootState } from 'app/shared/reducers';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nimport { saveAccountSettings, reset } from './settings.reducer';\r\n\r\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\r\n\r\nexport interface IUserSettingsState {\r\n  account: any;\r\n}\r\n\r\nexport class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {\r\n  componentDidMount() {\r\n    this.props.getSession();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.reset();\r\n  }\r\n\r\n  handleValidSubmit = (event, values) => {\r\n    const account = {\r\n      ...this.props.account,\r\n      ...values\r\n    };\r\n\r\n    this.props.saveAccountSettings(account);\r\n    event.persist();\r\n  };\r\n\r\n  render() {\r\n    const { account } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Row className=\"justify-content-center\">\r\n          <Col md=\"8\">\r\n            <h2 id=\"settings-title\">User settings for {account.login}</h2>\r\n            <AvForm id=\"settings-form\" onValidSubmit={this.handleValidSubmit}>\r\n              {/* First name */}\r\n              <AvField\r\n                className=\"form-control\"\r\n                name=\"firstName\"\r\n                label=\"First Name\"\r\n                id=\"firstName\"\r\n                placeholder=\"Your first name\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your first name is required.' },\r\n                  minLength: { value: 1, errorMessage: 'Your first name is required to be at least 1 character' },\r\n                  maxLength: { value: 50, errorMessage: 'Your first name cannot be longer than 50 characters' }\r\n                }}\r\n                value={account.firstName}\r\n              />\r\n              {/* Last name */}\r\n              <AvField\r\n                className=\"form-control\"\r\n                name=\"lastName\"\r\n                label=\"Last Name\"\r\n                id=\"lastName\"\r\n                placeholder=\"Your last name\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your last name is required.' },\r\n                  minLength: { value: 1, errorMessage: 'Your last name is required to be at least 1 character' },\r\n                  maxLength: { value: 50, errorMessage: 'Your last name cannot be longer than 50 characters' }\r\n                }}\r\n                value={account.lastName}\r\n              />\r\n              {/* Email */}\r\n              <AvField\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                placeholder=\"Your email\"\r\n                type=\"email\"\r\n                validate={{\r\n                  required: { value: true, errorMessage: 'Your email is required.' },\r\n                  minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\r\n                  maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\r\n                }}\r\n                value={account.email}\r\n              />\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Save\r\n              </Button>\r\n            </AvForm>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ authentication }: IRootState) => ({\r\n  account: authentication.account,\r\n  isAuthenticated: authentication.isAuthenticated\r\n});\r\n\r\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\r\n\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\ntype DispatchProps = typeof mapDispatchToProps;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SettingsPage);\r\n"]}]}