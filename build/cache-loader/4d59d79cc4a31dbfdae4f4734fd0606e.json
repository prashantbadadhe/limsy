{"remainingRequest":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js??ref--4-3!G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\password-reset.reducer.ts","dependencies":[{"path":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\password-reset.reducer.ts","mtime":1549223105111},{"path":"G:\\projects\\limsy-application\\node_modules\\react-hot-loader\\webpack.js","mtime":1549223610051},{"path":"G:\\projects\\limsy-application\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1549223563882},{"path":"G:\\projects\\limsy-application\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1549223563895},{"path":"G:\\projects\\limsy-application\\node_modules\\ts-loader\\index.js","mtime":1549223611188},{"path":"G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js","mtime":1549223603361}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nexport var ACTION_TYPES = {\r\n    RESET_PASSWORD_INIT: 'passwordReset/RESET_PASSWORD_INIT',\r\n    RESET_PASSWORD_FINISH: 'passwordReset/RESET_PASSWORD_FINISH',\r\n    RESET: 'passwordReset/RESET'\r\n};\r\nvar initialState = {\r\n    loading: false,\r\n    resetPasswordSuccess: false,\r\n    resetPasswordFailure: false\r\n};\r\n// Reducer\r\nexport default (function (state, action) {\r\n    if (state === void 0) { state = initialState; }\r\n    switch (action.type) {\r\n        case REQUEST(ACTION_TYPES.RESET_PASSWORD_FINISH):\r\n        case REQUEST(ACTION_TYPES.RESET_PASSWORD_INIT):\r\n            return tslib_1.__assign({}, state, { loading: true });\r\n        case FAILURE(ACTION_TYPES.RESET_PASSWORD_FINISH):\r\n        case FAILURE(ACTION_TYPES.RESET_PASSWORD_INIT):\r\n            return tslib_1.__assign({}, initialState, { loading: false, resetPasswordFailure: true });\r\n        case SUCCESS(ACTION_TYPES.RESET_PASSWORD_FINISH):\r\n        case SUCCESS(ACTION_TYPES.RESET_PASSWORD_INIT):\r\n            return tslib_1.__assign({}, initialState, { loading: false, resetPasswordSuccess: true });\r\n        case ACTION_TYPES.RESET:\r\n            return tslib_1.__assign({}, initialState);\r\n        default:\r\n            return state;\r\n    }\r\n});\r\nvar apiUrl = 'api/account/reset-password';\r\n// Actions\r\nexport var handlePasswordResetInit = function (mail) {\r\n    var _a;\r\n    return ({\r\n        type: ACTION_TYPES.RESET_PASSWORD_INIT,\r\n        // If the content-type isn't set that way, axios will try to encode the body and thus modify the data sent to the server.\r\n        payload: axios.post(apiUrl + \"/init\", mail, { headers: (_a = {}, _a['Content-Type'] = 'text/plain', _a) }),\r\n        meta: {\r\n            successMessage: 'Check your emails for details on how to reset your password.',\r\n            errorMessage: \"<strong>Email address isn't registered!</strong> Please check and try again\"\r\n        }\r\n    });\r\n};\r\nexport var handlePasswordResetFinish = function (key, newPassword) { return ({\r\n    type: ACTION_TYPES.RESET_PASSWORD_FINISH,\r\n    payload: axios.post(apiUrl + \"/finish\", { key: key, newPassword: newPassword }),\r\n    meta: {\r\n        successMessage: '<strong>Your password has been reset.</strong> Please '\r\n    }\r\n}); };\r\nexport var reset = function () { return ({\r\n    type: ACTION_TYPES.RESET\r\n}); };\r\n",{"version":3,"file":"G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\password-reset.reducer.ts","sourceRoot":"","sources":["G:\\projects\\limsy-application\\node_modules\\tslint-loader\\index.js!G:\\projects\\limsy-application\\src\\main\\webapp\\app\\modules\\account\\password-reset\\password-reset.reducer.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AAEjF,MAAM,CAAC,IAAM,YAAY,GAAG;IAC1B,mBAAmB,EAAE,mCAAmC;IACxD,qBAAqB,EAAE,qCAAqC;IAC5D,KAAK,EAAE,qBAAqB;CAC7B,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,oBAAoB,EAAE,KAAK;IAC3B,oBAAoB,EAAE,KAAK;CAC5B,CAAC;AAIF,UAAU;AACV,gBAAe,UAAC,KAAwC,EAAE,MAAM;IAAhD,sBAAA,EAAA,oBAAwC;IACtD,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,4BACK,KAAK,IACR,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,4BACK,YAAY,IACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,4BACK,YAAY,IACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,4BACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,EAAC;AAEF,IAAM,MAAM,GAAG,4BAA4B,CAAC;AAE5C,UAAU;AACV,MAAM,CAAC,IAAM,uBAAuB,GAAG,UAAA,IAAI;;IAAI,OAAA,CAAC;QAC9C,IAAI,EAAE,YAAY,CAAC,mBAAmB;QACtC,yHAAyH;QACzH,OAAO,EAAE,KAAK,CAAC,IAAI,CAAI,MAAM,UAAO,EAAE,IAAI,EAAE,EAAE,OAAO,YAAI,GAAC,cAAc,IAAG,YAAY,KAAE,EAAE,CAAC;QAC5F,IAAI,EAAE;YACJ,cAAc,EAAE,8DAA8D;YAC9E,YAAY,EAAE,6EAA6E;SAC5F;KACF,CAAC;AAR6C,CAQ7C,CAAC;AAEH,MAAM,CAAC,IAAM,yBAAyB,GAAG,UAAC,GAAG,EAAE,WAAW,IAAK,OAAA,CAAC;IAC9D,IAAI,EAAE,YAAY,CAAC,qBAAqB;IACxC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAI,MAAM,YAAS,EAAE,EAAE,GAAG,KAAA,EAAE,WAAW,aAAA,EAAE,CAAC;IAC7D,IAAI,EAAE;QACJ,cAAc,EAAE,wDAAwD;KACzE;CACF,CAAC,EAN6D,CAM7D,CAAC;AAEH,MAAM,CAAC,IAAM,KAAK,GAAG,cAAM,OAAA,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,EAFyB,CAEzB,CAAC","sourcesContent":["import axios from 'axios';\r\n\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\n\r\nexport const ACTION_TYPES = {\r\n  RESET_PASSWORD_INIT: 'passwordReset/RESET_PASSWORD_INIT',\r\n  RESET_PASSWORD_FINISH: 'passwordReset/RESET_PASSWORD_FINISH',\r\n  RESET: 'passwordReset/RESET'\r\n};\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  resetPasswordSuccess: false,\r\n  resetPasswordFailure: false\r\n};\r\n\r\nexport type PasswordResetState = Readonly<typeof initialState>;\r\n\r\n// Reducer\r\nexport default (state: PasswordResetState = initialState, action): PasswordResetState => {\r\n  switch (action.type) {\r\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_FINISH):\r\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_INIT):\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_FINISH):\r\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_INIT):\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        resetPasswordFailure: true\r\n      };\r\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_FINISH):\r\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_INIT):\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        resetPasswordSuccess: true\r\n      };\r\n    case ACTION_TYPES.RESET:\r\n      return {\r\n        ...initialState\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst apiUrl = 'api/account/reset-password';\r\n\r\n// Actions\r\nexport const handlePasswordResetInit = mail => ({\r\n  type: ACTION_TYPES.RESET_PASSWORD_INIT,\r\n  // If the content-type isn't set that way, axios will try to encode the body and thus modify the data sent to the server.\r\n  payload: axios.post(`${apiUrl}/init`, mail, { headers: { ['Content-Type']: 'text/plain' } }),\r\n  meta: {\r\n    successMessage: 'Check your emails for details on how to reset your password.',\r\n    errorMessage: \"<strong>Email address isn't registered!</strong> Please check and try again\"\r\n  }\r\n});\r\n\r\nexport const handlePasswordResetFinish = (key, newPassword) => ({\r\n  type: ACTION_TYPES.RESET_PASSWORD_FINISH,\r\n  payload: axios.post(`${apiUrl}/finish`, { key, newPassword }),\r\n  meta: {\r\n    successMessage: '<strong>Your password has been reset.</strong> Please '\r\n  }\r\n});\r\n\r\nexport const reset = () => ({\r\n  type: ACTION_TYPES.RESET\r\n});\r\n"]}]}